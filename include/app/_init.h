//
//  app/init.h
//  CBApp
//
//  Created by Collin Bond on 4/15/25.
//
// *************************************************************************** //
// *************************************************************************** //
#ifndef _CBAPP_APP_INIT_H
#define _CBAPP_APP_INIT_H                  1

#include <filesystem>
#include <array>
#include <cstddef> // for std::size_t
#include <string_view>

//#include "imgui.h"
//#include "imgui_impl_glfw.h"
#include "imgui_impl_opengl3.h"



//  1.  PRE-PROCESSOR DEFINED MACROS...
// *************************************************************************** //
// *************************************************************************** //

//
//  ...
//






// *************************************************************************** //
//
//
//  2.  GLOBAL-CONSTANTS AND NAMESPACE-DEFINED VARIABLES...
// *************************************************************************** //
// *************************************************************************** //

namespace cb { namespace app { //     BEGINNING NAMESPACE "cb" :: "app"...
// *************************************************************************** //
// *************************************************************************** //

//  0.  INLINE UTILITY FUNCTIONS...
//
//
//  "get_my_file_path"
//
inline const char * path_to_char(const std::filesystem::path & dir, const char * file) {
    static const std::string    path   = (dir / file).string();
    return path.c_str();
}



//  1.  APP CONSTANTS               | TITLES, GEOMETRIES, WINDOW DIMENSIONS, DEFAULT SETTINGS, ETC...
//
//
//      1.1         INFORMATION...
//
//                              A.  GENERAL APPLICATION STUFF.
inline constexpr float              DEF_MOUSEWHEEL_SCROLL_SPEED         = 0.50f;
// inline constexpr const char *       DEF_SIDEBAR_WIN_TITLE               = "Sidebar";
// inline constexpr const char *       DEF_MAIN_WIN_TITLE                  = "My Application";
// inline constexpr const char *       DEF_GRAPHING_APP_TITLE              = "Graphing Application";
//
//                              B.  PLOT AND DATA VISUALIZATIONS.
inline constexpr float              DEF_PLOT_LW                         = 0.50f;
//
//
//
//      1.2         DIMENSIONS & GEOMETRY...
//
//                              A.  ROOT WINDOW.
inline constexpr float              DEF_ROOT_WINDOW_SCALE               = 0.80f;
//
//                              B.  SIDEBAR.
inline constexpr ImVec2             DEF_SIDEBAR_INSET_PADDING_SCALE     = ImVec2(1.0f,      1.0f);      //  Scale of "style.WindowPadding" used inside Titlebar Window...
inline constexpr ImVec2             DEF_SIDEBAR_COLLAPSE_BUTTON_SIZE    = ImVec2(20.0f,     20.0f);     //  Size of the OPEN/CLOSE Button...
inline constexpr float              DEF_SB_CLOSED_WIDTH                 = 0.20;                     //  SIDEBAR WINDOW...
inline constexpr float              DEF_SB_OPEN_WIDTH                   = 0.20;
//
//                                  B1. Sidebae "Toggle" Button:
inline constexpr float              DEF_SB_TWIN_WINDOWBORDERSIZE        = 0.0f;
inline constexpr float              DEF_SB_TWIN_WINDOWROUNDING          = 4.0f;
//
//                                  B2. Settings:
inline constexpr bool               DEF_PERF_METRICS_STATE              = true;     //  begin program w/ perf. metrics panel open or closed.
inline constexpr bool               DEF_PERF_PLOTS_STATE                = false;    //  begin w/ perf. plots open or closed.
inline constexpr float              PERF_PLOTS_HISTORY_LENGTH           = 6.0f;    //  history length (in sec) of perf. plots
//
//
//
//      1.3         COLORS...
//                              A.  GENERAL COLORS.
inline constexpr ImVec4             DEF_APPLE_BLUE                      = ImVec4(0.244f,    0.467f,     0.847f,     1.000f);
inline constexpr ImVec4             DEF_APPLE_RED                       = ImVec4(1.000f,    0.271f,     0.227f,     1.000f);
inline constexpr ImVec4             DEF_INVISIBLE_COLOR                 = ImVec4(0.000f,    0.000f,     0.000f,     0.000f);
//

inline constexpr ImVec4             DEF_LIVE_SELECTBLUE                 = ImVec4(0.255,     0.298f,     0.361f,     1.000f);
inline constexpr ImVec4             DEF_LIVE_LIGHTBLUE                  = ImVec4(0.188,     0.224f,     0.271f,     1.000f);
inline constexpr ImVec4             DEF_LIVE_MIDBLUE                    = ImVec4(0.137f,    0.161f,     0.196f,     1.000f);
inline constexpr ImVec4             DEF_LIVE_DARKBLUE                   = ImVec4(0.090f,    0.098f,     0.118f,     1.000f);
//
//
//                              B.  WINDOW COLORS.
inline constexpr ImVec4             DEF_ROOT_WIN_BG                     = ImVec4(0.000f,    0.000f,     0.000f,     0.000f);
inline constexpr ImVec4             DEF_SIDEBAR_WIN_BG                  = ImVec4(0.192f,    0.192f,     0.192f,     1.000f);
inline constexpr ImVec4             DEF_TITLEBAR_WIN_BG                 = ImVec4(0.000f,    0.000f,     0.000f,     0.500f);
inline constexpr ImVec4             DEF_MAIN_WIN_BG                     = ImVec4(0.125f,    0.133f,     0.141f,     1.000f);

  
  
  
  
  
//  2.  FILE-NAMES, DIRECTORY-NAMES, ETC    [COMPILE-TIME]...
//
//      2A.     DIRECTORY-NAMES...
inline constexpr const char *       assets_dirname                      = "assets";
//
//      2A.1    Sub-Directory Names...
inline constexpr const char *       config_dirname                      = "config";
inline constexpr const char *       fonts_dirname                       = "fonts";
//
//
//      2B.     FILENAMES...
inline constexpr const char *       ini_filename                        = "cb_app.ini";
inline constexpr const char *       style_filename                      = "imgui_style.json";






//  3.  FILE-PATHS, DIRECTORIES      | (FONT FAMILIES, SIZES, ETC)...
//
//      3A.     MAIN PROJECT DIRECTORIES    [RUN-TIME]...
//inline const std::filesystem::path  CURRENT_PATH            = std::filesystem::current_path();    //  EXE_DIR = std::filesystem::absolute(CURRENT_PATH);
inline constexpr const char *       EXE_DIR                             = "/";
inline constexpr const char *       BUILD_DIR                           = "../";
inline constexpr const char *       ROOT_DIR                            = "../../";
//
//      3A.2    Sub-Directories...
//                      1.  "Scripts"...
inline constexpr const char *       SCRIPTS_DIR                         = "../../scripts/";
inline constexpr const char *       PYTHON_DIR                          = "../../scripts/python/";
//
//
//                      2.  "Assets"...
inline constexpr const char *       ASSETS_DIR                          = "../../assets/";
//
inline constexpr const char *       CONFIG_DIR                          = "../../assets/config/";
inline constexpr const char *       FONTS_DIR                           = "../../assets/fonts/";
inline constexpr const char *       BIN_DIR                             = "../../assets/bin/";
//
//                      3.  "Data"...
inline constexpr const char *       DATA_DIR                            = "../../data/";
//
inline constexpr const char *       USER_DATA_DIR                       = "../../data/user_data/";
//
//
//
//
//      3B.     FILE-PATHS                  [RUN-TIME]...
inline constexpr const char *       INI_FILEPATH                        = "../../assets/config/cb_app.ini";
inline constexpr const char *       INI_BACKUP_FILEPATH                 = "../../assets/config/.backup.ini";     //  "../../assets/fonts/swap_cb_app.ini";

inline constexpr const char *       STYLE_FILEPATH                      = "../../assets/config/imgui_style.json";

inline constexpr const char *       PYTHON_FPGA_FILEPATH                = "../../scripts/python/fpga.py";
inline constexpr const char *       PYTHON_ECHO_FILEPATH                = "../../scripts/python/echo.py";
inline constexpr const char *       PYTHON_COUNTER_FILEPATH             = "../../scripts/python/counter.py";
inline constexpr const char *       PYTHON_DUMMY_FPGA_FILEPATH          = "../../scripts/python/counter_dummy.py";



//      3.3     Fonts.
//
inline constexpr const char * get_font_path(void) {
    #if defined(__APPLE__)
        return "/System/Library/Fonts/SFNS.ttf";
    # else
        return "../../assets/fonts/Roboto/static/Roboto-Regular.ttf";
    #endif      //  __APPLE__   //
}

inline constexpr const char *       DEF_FONT_PATH                       = get_font_path();
    


// *************************************************************************** //
//
//
//  FONTS...
// *************************************************************************** //
// *************************************************************************** //
inline constexpr float              DEF_FONT_SIZE                       = 13.0f;
inline constexpr float              DEF_SMALL_FONT_SIZE                 = 11.0f;
inline constexpr float              DEF_FOOTNOTE_FONT_SIZE              = 8.0f;


//  FUNCTIONAL MACRO TO DEFINE APPLICATION FONTS...
//
#if defined(__APPLE__)
    //  Fonts for MacOS Builds.
    #define _CBAPP_FONT_LIST(X)         \
        X(Main,             "/System/Library/Fonts/SFNS.ttf",                               DEF_FONT_SIZE)          \
        X(Small,            "/System/Library/Fonts/SFNS.ttf",                               DEF_SMALL_FONT_SIZE)    \
        X(FootNote,         "/System/Library/Fonts/SFNS.ttf",                               DEF_FOOTNOTE_FONT_SIZE) \
        X(Mono,             "/System/Library/Fonts/SFNSMono.ttf",                           DEF_FONT_SIZE)          \
        X(SanSerif,         "/System/Library/Fonts/NewYork.ttf",                            DEF_FONT_SIZE)          \
        X(SanSerifSmall,    "/System/Library/Fonts/NewYork.ttf",                            DEF_SMALL_FONT_SIZE)
# else
    //  Fonts for Windows, Linux, or other Builds.
    #define _CBAPP_FONT_LIST(X)         \
        X(Main,             "../../assets/fonts/Roboto/static/Roboto-Regular.ttf",          DEF_FONT_SIZE)          \
        X(Small,            "../../assets/fonts/Roboto/static/Roboto-Regular.ttf",          DEF_SMALL_FONT_SIZE)    \
        X(FootNote,         "../../assets/fonts/Roboto/static/Roboto-Regular.ttf",          DEF_FOOTNOTE_FONT_SIZE)
#endif  //  __APPLE__  //



// *************************************************************************** //

//  "Font_t"
//      - Enum to provide names for the index of each font...
enum class Font_t : int {
#define X(name, path, size) name,
    _CBAPP_FONT_LIST(X)
#undef X
    Count
};


//  "FontInfo"
//      - Simple struct to define the various properties of each font...
//#ifdef __APPLE__
struct FontInfo {
    std::string         path;
    float               size;
};
//  # else
//  struct FontInfo {
//      int                 rid;
//      float               size;
//  };
//#endif  //  __APPLE__  //



//  COMPILE-TIME ARRAY CONTAINING ALL APPLICATION_FONTS
//
inline static const std::array<FontInfo, int( Font_t::Count )>     APPLICATION_FONT_STYLES = {{
#define X(name, path, size) { path, size },
    _CBAPP_FONT_LIST(X)
#undef X
}};






// *************************************************************************** //
//
//
//
// *************************************************************************** //
// *************************************************************************** //
} }//   END OF "cb" :: "app" NAMESPACE.







    



// *************************************************************************** //
//
//
//  9.  COMPILE-TIME DEFINED MESSAGES AND PROGRAM INFORMATION...
// *************************************************************************** //
// *************************************************************************** //
//
namespace cb {  //     BEGINNING NAMESPACE "cb"...
// *************************************************************************** //
// *************************************************************************** //



//  1.  ERROR MESSAGING             | ASSERTION STATEMENTS, EXCEPTION MESSAGES, ETC...
//
namespace error { //     BEGINNING NAMESPACE "error"...
// *************************************************************************** //
// *************************************************************************** //

//  1.      GLFW ERRORS...
inline constexpr const char *       GLFW_INIT_ERROR                             =
    "A fatal error has occured during program initialization:\n\t"
    "Call to \"glfwInit()\" returned NULL.\n"
    "This may occur if your machine does not have the necessary graphics drivers for OpenGL installed.\n"
    "Ensure that your system is using the designated GPU / Graphics Card and NOT the on-board "
    "graphics that are build into the motherboard.";
    
inline constexpr const char *       GLFW_WINDOW_INIT_ERROR                      =
    "A fatal error has occured during program initialization:\n\t"
    "Call to \"glfwCreateWindow()\" returned NULL.\n";
//
//
//
//  2.      ASSERT STATEMENT ERRORS...
inline constexpr const char *       ASSERT_INVALID_WINDOW_RENDER_FUNCTIONS      =
    "Assert statement failure during initialization:\n\t"
    "One or more window render functions is NULL (app::WinInfo.render_fn).\n"
    "CHECK:\n"
    "\t(1.) \t \"dispatch_window_function()\" in \"src/app/init.cpp\".\n"
    "\t(2.) \t \"#define _CBAPP_WINDOW_LIST(X)\" in \"include/app/state/_state.h\".\n";
    
inline constexpr const char *       ASSERT_INVALID_PRIMARY_WINDOWS              =
    "Assert statement failure during initialization:\n\t"
    "\"Sidebar\" window cannot be an item inside \"this->m_primary_windows!\" variable.";



// *************************************************************************** //
//
//
//
// *************************************************************************** //
// *************************************************************************** //
}//   END OF "error" NAMESPACE.






//  2.  GENERAL INFORMATION         | TOOL-TIPS, PROMPTS, PROGRAM INFORMATION, ETC...
//
namespace info { //     BEGINNING NAMESPACE "info"...
// *************************************************************************** //
// *************************************************************************** //

//
//  ...
//


// *************************************************************************** //
//
//
//  DEFINE EACH COLORMAP...
// *************************************************************************** //
// *************************************************************************** //

inline constexpr std::pair<const char *, std::array<ImU32, 256> >
Blues           = { "Blues",                { 0xFFFFFBF7, 0xFFFFFBF6, 0xFFFFFAF5, 0xFFFEFAF5, 0xFFFEF9F4, 0xFFFEF9F3, 0xFFFEF8F2, 0xFFFDF8F2, 0xFFFDF7F1, 0xFFFDF7F0, 0xFFFDF6EF, 0xFFFCF6EE, 0xFFFCF5EE, 0xFFFCF5ED, 0xFFFCF4EC, 0xFFFBF4EB, 0xFFFBF3EB, 0xFFFBF3EA, 0xFFFBF2E9, 0xFFFAF2E8, 0xFFFAF1E7, 0xFFFAF1E7, 0xFFFAF0E6, 0xFFF9F0E5, 0xFFF9EFE4, 0xFFF9EFE4, 0xFFF9EEE3, 0xFFF8EEE2, 0xFFF8EDE1, 0xFFF8EDE0, 0xFFF8ECE0, 0xFFF7ECDF, 0xFFF7EBDE, 0xFFF7EBDE, 0xFFF7EADD, 0xFFF6EADC, 0xFFF6E9DB, 0xFFF6E9DB, 0xFFF6E8DA, 0xFFF5E8D9, 0xFFF5E7D8, 0xFFF5E7D8, 0xFFF5E6D7, 0xFFF4E6D6, 0xFFF4E5D5, 0xFFF4E5D5, 0xFFF4E4D4, 0xFFF3E4D3, 0xFFF3E3D2, 0xFFF3E3D2, 0xFFF3E2D1, 0xFFF2E2D0, 0xFFF2E1CF, 0xFFF2E1CF, 0xFFF2E0CE, 0xFFF1E0CD, 0xFFF1DFCC, 0xFFF1DFCC, 0xFFF0DECA, 0xFFF0DEC9, 0xFFF0DDC8, 0xFFEFDDC7, 0xFFEFDCC6, 0xFFEFDCC5, 0xFFEEDBC3, 0xFFEEDBC2, 0xFFEDDAC1, 0xFFEDD9C0, 0xFFEDD9BF, 0xFFECD8BE, 0xFFECD8BC, 0xFFEBD7BB, 0xFFEBD7BA, 0xFFEBD6B9, 0xFFEAD6B8, 0xFFEAD5B7, 0xFFE9D5B5, 0xFFE9D4B4, 0xFFE9D4B3, 0xFFE8D3B2, 0xFFE8D3B1, 0xFFE8D2B0, 0xFFE7D2AE, 0xFFE7D1AD, 0xFFE6D0AC, 0xFFE6D0AB, 0xFFE6CFA9, 0xFFE5CEA8, 0xFFE5CEA7, 0xFFE4CDA5, 0xFFE4CCA4, 0xFFE4CBA2, 0xFFE3CBA1, 0xFFE3CA9F, 0xFFE2C99E, 0xFFE2C99C, 0xFFE2C89B, 0xFFE1C799, 0xFFE1C698, 0xFFE1C697, 0xFFE0C595, 0xFFE0C494, 0xFFDFC392, 0xFFDFC391, 0xFFDFC28F, 0xFFDEC18E, 0xFFDEC08C, 0xFFDDC08B, 0xFFDDBF8A, 0xFFDDBE88, 0xFFDCBD87, 0xFFDCBD85, 0xFFDBBC84, 0xFFDBBB82, 0xFFDBBA81, 0xFFDAB97F, 0xFFDAB87E, 0xFFD9B87C, 0xFFD9B77B, 0xFFD9B67A, 0xFFD8B578, 0xFFD8B477, 0xFFD7B375, 0xFFD7B274, 0xFFD6B172, 0xFFD6B071, 0xFFD6AF6F, 0xFFD5AE6E, 0xFFD5AE6C, 0xFFD4AD6B, 0xFFD4AC69, 0xFFD4AB68, 0xFFD3AA66, 0xFFD3A965, 0xFFD2A863, 0xFFD2A762, 0xFFD1A660, 0xFFD1A55F, 0xFFD1A45E, 0xFFD0A45C, 0xFFD0A35B, 0xFFCFA259, 0xFFCFA158, 0xFFCEA057, 0xFFCE9F55, 0xFFCD9E54, 0xFFCD9D53, 0xFFCC9C52, 0xFFCC9B51, 0xFFCB9A50, 0xFFCB994E, 0xFFCA994D, 0xFFCA984C, 0xFFC9974B, 0xFFC9964A, 0xFFC89549, 0xFFC79447, 0xFFC79346, 0xFFC69245, 0xFFC69144, 0xFFC59043, 0xFFC58F42, 0xFFC48E40, 0xFFC48E3F, 0xFFC38D3E, 0xFFC38C3D, 0xFFC28B3C, 0xFFC28A3B, 0xFFC18939, 0xFFC18838, 0xFFC08737, 0xFFBF8636, 0xFFBF8535, 0xFFBE8434, 0xFFBE8333, 0xFFBD8232, 0xFFBC8131, 0xFFBC8030, 0xFFBB7F2F, 0xFFBB7E2E, 0xFFBA7C2D, 0xFFB97B2C, 0xFFB97A2B, 0xFFB8792A, 0xFFB87829, 0xFFB77728, 0xFFB67627, 0xFFB67526, 0xFFB57425, 0xFFB57324, 0xFFB47223, 0xFFB37122, 0xFFB37021, 0xFFB26F20, 0xFFB26E1F, 0xFFB16D1E, 0xFFB06C1D, 0xFFB06A1C, 0xFFAF691B, 0xFFAE681B, 0xFFAE671A, 0xFFAD6619, 0xFFAC6519, 0xFFAB6418, 0xFFAA6317, 0xFFA96217, 0xFFA86116, 0xFFA76015, 0xFFA75F15, 0xFFA65F14, 0xFFA55E13, 0xFFA45D13, 0xFFA35C12, 0xFFA25B11, 0xFFA15A11, 0xFFA05910, 0xFF9F580F, 0xFF9F570F, 0xFF9E560E, 0xFF9D550D, 0xFF9C540C, 0xFF9B530C, 0xFF9A520B, 0xFF99510A, 0xFF98500A, 0xFF974F09, 0xFF974E08, 0xFF964D08, 0xFF944C08, 0xFF924B08, 0xFF914A08, 0xFF8F4908, 0xFF8E4808, 0xFF8C4708, 0xFF8B4608, 0xFF894408, 0xFF884308, 0xFF864208, 0xFF854108, 0xFF834008, 0xFF823F08, 0xFF803E08, 0xFF7F3D08, 0xFF7D3C08, 0xFF7C3B08, 0xFF7A3A08, 0xFF793908, 0xFF773808, 0xFF763708, 0xFF743608, 0xFF733508, 0xFF713408, 0xFF703308, 0xFF6E3208, 0xFF6D3108, 0xFF6B3008 } };


inline constexpr std::pair<const char *, std::array<ImU32, 256> >
Magma           = { "Magma",                { 0xFF040000, 0xFF060101, 0xFF080102, 0xFF0A0203, 0xFF0C0203, 0xFF0E0304, 0xFF100305, 0xFF120406, 0xFF140407, 0xFF160508, 0xFF180508, 0xFF1A0609, 0xFF1C060A, 0xFF1E070B, 0xFF20070C, 0xFF22080D, 0xFF24080E, 0xFF26090E, 0xFF280A0F, 0xFF2A0A10, 0xFF2C0B11, 0xFF2E0B12, 0xFF300C13, 0xFF320C14, 0xFF340D14, 0xFF360D15, 0xFF380E16, 0xFF3A0E17, 0xFF3C0F18, 0xFF3E0F19, 0xFF400F1B, 0xFF420F1C, 0xFF440F1E, 0xFF460F1F, 0xFF480F21, 0xFF4A0F22, 0xFF4C0F24, 0xFF4F0F26, 0xFF510F27, 0xFF530F29, 0xFF550F2A, 0xFF570F2C, 0xFF590F2D, 0xFF5B0F2F, 0xFF5D0F30, 0xFF5F0F32, 0xFF610F34, 0xFF630F35, 0xFF650F37, 0xFF670F38, 0xFF690F3A, 0xFF6B0F3B, 0xFF6D0F3D, 0xFF6F0F3E, 0xFF710F40, 0xFF730F41, 0xFF750F43, 0xFF760F45, 0xFF771046, 0xFF771048, 0xFF77114A, 0xFF78114B, 0xFF78124D, 0xFF78134E, 0xFF791350, 0xFF791452, 0xFF7A1453, 0xFF7A1555, 0xFF7A1557, 0xFF7B1658, 0xFF7B175A, 0xFF7C175B, 0xFF7C185D, 0xFF7C185F, 0xFF7D1960, 0xFF7D1962, 0xFF7E1A64, 0xFF7E1B65, 0xFF7E1B67, 0xFF7F1C68, 0xFF7F1C6A, 0xFF7F1D6C, 0xFF801D6D, 0xFF801E6F, 0xFF811E71, 0xFF811F72, 0xFF812074, 0xFF812075, 0xFF812177, 0xFF812178, 0xFF81227A, 0xFF81227B, 0xFF80237D, 0xFF80247F, 0xFF802480, 0xFF802582, 0xFF802583, 0xFF802685, 0xFF802686, 0xFF802788, 0xFF802889, 0xFF80288B, 0xFF80298D, 0xFF80298E, 0xFF802A90, 0xFF802A91, 0xFF802B93, 0xFF7F2B94, 0xFF7F2C96, 0xFF7F2D97, 0xFF7F2D99, 0xFF7F2E9B, 0xFF7F2E9C, 0xFF7F2F9E, 0xFF7F2F9F, 0xFF7E30A1, 0xFF7E31A3, 0xFF7D31A4, 0xFF7D32A6, 0xFF7C32A8, 0xFF7C33A9, 0xFF7B34AB, 0xFF7B34AC, 0xFF7A35AE, 0xFF7A35B0, 0xFF7936B1, 0xFF7937B3, 0xFF7837B5, 0xFF7838B6, 0xFF7738B8, 0xFF7739BA, 0xFF763ABB, 0xFF763ABD, 0xFF753BBF, 0xFF753BC0, 0xFF743CC2, 0xFF743DC3, 0xFF733DC5, 0xFF733EC7, 0xFF723EC8, 0xFF723FCA, 0xFF7140CC, 0xFF7140CD, 0xFF7041CF, 0xFF6F43D0, 0xFF6F44D1, 0xFF6E45D2, 0xFF6D46D4, 0xFF6D47D5, 0xFF6C48D6, 0xFF6B49D7, 0xFF6A4AD9, 0xFF6A4CDA, 0xFF694DDB, 0xFF684EDD, 0xFF684FDE, 0xFF6750DF, 0xFF6651E0, 0xFF6652E2, 0xFF6553E3, 0xFF6455E4, 0xFF6356E5, 0xFF6357E7, 0xFF6258E8, 0xFF6159E9, 0xFF615AEB, 0xFF605BEC, 0xFF5F5DED, 0xFF5E5EEE, 0xFF5E5FF0, 0xFF5D60F1, 0xFF5D62F1, 0xFF5E64F2, 0xFF5E66F2, 0xFF5F67F3, 0xFF5F69F3, 0xFF5F6BF4, 0xFF606DF4, 0xFF606FF4, 0xFF6071F5, 0xFF6173F5, 0xFF6175F6, 0xFF6277F6, 0xFF6279F6, 0xFF627BF7, 0xFF637CF7, 0xFF637EF8, 0xFF6480F8, 0xFF6482F9, 0xFF6484F9, 0xFF6586F9, 0xFF6588FA, 0xFF668AFA, 0xFF668CFB, 0xFF668EFB, 0xFF6790FC, 0xFF6791FC, 0xFF6793FC, 0xFF6895FD, 0xFF6997FD, 0xFF6A99FD, 0xFF6B9BFD, 0xFF6D9DFD, 0xFF6E9EFD, 0xFF6FA0FD, 0xFF71A2FD, 0xFF72A4FD, 0xFF73A6FD, 0xFF75A8FD, 0xFF76A9FD, 0xFF77ABFD, 0xFF78ADFD, 0xFF7AAFFD, 0xFF7BB1FE, 0xFF7CB3FE, 0xFF7EB5FE, 0xFF7FB6FE, 0xFF80B8FE, 0xFF82BAFE, 0xFF83BCFE, 0xFF84BEFE, 0xFF86C0FE, 0xFF87C1FE, 0xFF88C3FE, 0xFF89C5FE, 0xFF8BC7FE, 0xFF8CC9FE, 0xFF8ECBFE, 0xFF8FCCFE, 0xFF91CEFE, 0xFF93D0FE, 0xFF95D2FE, 0xFF96D4FE, 0xFF98D5FE, 0xFF9AD7FD, 0xFF9CD9FD, 0xFF9DDBFD, 0xFF9FDDFD, 0xFFA1DEFD, 0xFFA3E0FD, 0xFFA5E2FD, 0xFFA6E4FD, 0xFFA8E6FD, 0xFFAAE7FD, 0xFFACE9FD, 0xFFADEBFD, 0xFFAFEDFD, 0xFFB1EFFD, 0xFFB3F0FC, 0xFFB4F2FC, 0xFFB6F4FC, 0xFFB8F6FC, 0xFFBAF8FC, 0xFFBBF9FC, 0xFFBDFBFC, 0xFFBFFDFC } };


inline constexpr std::pair<const char *, std::array<ImU32, 256> >
Inferno         = { "Inferno",              { 0xFF040000, 0xFF060001, 0xFF080102, 0xFF0A0103, 0xFF0D0204, 0xFF0F0205, 0xFF110306, 0xFF130307, 0xFF150308, 0xFF170409, 0xFF1A040A, 0xFF1C050A, 0xFF1E050B, 0xFF20060C, 0xFF22060D, 0xFF24060E, 0xFF26070F, 0xFF290710, 0xFF2B0811, 0xFF2D0812, 0xFF2F0813, 0xFF310914, 0xFF330915, 0xFF360A16, 0xFF380A17, 0xFF3A0B18, 0xFF3C0B19, 0xFF3E0B1A, 0xFF400C1B, 0xFF420C1C, 0xFF440C1E, 0xFF450C1F, 0xFF460C21, 0xFF480C23, 0xFF490C24, 0xFF4B0C26, 0xFF4C0C28, 0xFF4E0C29, 0xFF4F0C2B, 0xFF510C2D, 0xFF520C2E, 0xFF540C30, 0xFF550C32, 0xFF570C33, 0xFF580C35, 0xFF5A0C37, 0xFF5B0C38, 0xFF5D0C3A, 0xFF5E0C3C, 0xFF600C3D, 0xFF610C3F, 0xFF630C41, 0xFF640C42, 0xFF660C44, 0xFF670C46, 0xFF690C47, 0xFF6A0C49, 0xFF6B0C4B, 0xFF6B0D4C, 0xFF6B0D4E, 0xFF6B0E50, 0xFF6B0E51, 0xFF6B0F53, 0xFF6B1054, 0xFF6C1056, 0xFF6C1158, 0xFF6C1159, 0xFF6C125B, 0xFF6C125D, 0xFF6C135E, 0xFF6C1460, 0xFF6C1461, 0xFF6C1563, 0xFF6C1565, 0xFF6C1666, 0xFF6C1668, 0xFF6C176A, 0xFF6C186B, 0xFF6D186D, 0xFF6D196E, 0xFF6D1970, 0xFF6D1A72, 0xFF6D1A73, 0xFF6D1B75, 0xFF6D1B77, 0xFF6D1C78, 0xFF6D1D7A, 0xFF6C1D7B, 0xFF6C1E7D, 0xFF6B1E7E, 0xFF6B1F80, 0xFF6A1F82, 0xFF6A2083, 0xFF692185, 0xFF692186, 0xFF682288, 0xFF68228A, 0xFF67238B, 0xFF67238D, 0xFF67248E, 0xFF662590, 0xFF662592, 0xFF652693, 0xFF652695, 0xFF642796, 0xFF642798, 0xFF63289A, 0xFF63289B, 0xFF62299D, 0xFF622A9E, 0xFF612AA0, 0xFF612BA1, 0xFF612BA3, 0xFF602CA5, 0xFF5F2DA6, 0xFF5E2DA8, 0xFF5D2EA9, 0xFF5D2FAB, 0xFF5C30AC, 0xFF5B31AE, 0xFF5A32AF, 0xFF5933B0, 0xFF5833B2, 0xFF5734B3, 0xFF5635B5, 0xFF5536B6, 0xFF5437B8, 0xFF5338B9, 0xFF5338BB, 0xFF5239BC, 0xFF513ABE, 0xFF503BBF, 0xFF4F3CC1, 0xFF4E3DC2, 0xFF4D3DC4, 0xFF4C3EC5, 0xFF4B3FC7, 0xFF4A40C8, 0xFF4941C9, 0xFF4942CB, 0xFF4843CC, 0xFF4743CE, 0xFF4644CF, 0xFF4546D0, 0xFF4347D1, 0xFF4248D2, 0xFF414AD3, 0xFF404BD5, 0xFF3F4CD6, 0xFF3E4DD7, 0xFF3C4FD8, 0xFF3B50D9, 0xFF3A51DA, 0xFF3953DB, 0xFF3854DC, 0xFF3755DD, 0xFF3557DE, 0xFF3458DF, 0xFF3359E0, 0xFF325BE1, 0xFF315CE2, 0xFF305DE3, 0xFF2E5EE4, 0xFF2D60E5, 0xFF2C61E7, 0xFF2B62E8, 0xFF2A64E9, 0xFF2965EA, 0xFF2766EB, 0xFF2668EC, 0xFF2569ED, 0xFF246BED, 0xFF236CEE, 0xFF226EEE, 0xFF2170EF, 0xFF2072EF, 0xFF1F73F0, 0xFF1D75F0, 0xFF1C77F1, 0xFF1B79F1, 0xFF1A7BF2, 0xFF197CF2, 0xFF187EF3, 0xFF1780F3, 0xFF1682F4, 0xFF1583F4, 0xFF1485F5, 0xFF1287F5, 0xFF1189F6, 0xFF108AF6, 0xFF0F8CF7, 0xFF0E8EF7, 0xFF0D90F8, 0xFF0C91F8, 0xFF0B93F9, 0xFF0A95F9, 0xFF0997FA, 0xFF0899FA, 0xFF069AFB, 0xFF079CFB, 0xFF099EFB, 0xFF0BA0FB, 0xFF0DA2FA, 0xFF0FA4FA, 0xFF11A6FA, 0xFF13A8FA, 0xFF15AAFA, 0xFF17ABFA, 0xFF19ADFA, 0xFF1BAFFA, 0xFF1DB1F9, 0xFF1FB3F9, 0xFF20B5F9, 0xFF22B7F9, 0xFF24B9F9, 0xFF26BBF9, 0xFF28BDF9, 0xFF2ABFF8, 0xFF2CC0F8, 0xFF2EC2F8, 0xFF30C4F8, 0xFF32C6F8, 0xFF34C8F8, 0xFF36CAF8, 0xFF38CCF7, 0xFF3ACEF7, 0xFF3CD0F7, 0xFF3ED1F7, 0xFF42D3F7, 0xFF45D5F7, 0xFF49D6F8, 0xFF4DD8F8, 0xFF50DAF8, 0xFF54DBF8, 0xFF58DDF8, 0xFF5BDEF8, 0xFF5FE0F9, 0xFF62E2F9, 0xFF66E3F9, 0xFF6AE5F9, 0xFF6DE7F9, 0xFF71E8FA, 0xFF75EAFA, 0xFF78EBFA, 0xFF7CEDFA, 0xFF80EFFA, 0xFF83F0FA, 0xFF87F2FB, 0xFF8BF4FB, 0xFF8EF5FB, 0xFF92F7FB, 0xFF95F8FB, 0xFF99FAFB, 0xFF9DFCFC, 0xFFA0FDFC, 0xFFA4FFFC } };


inline constexpr std::pair<const char *, std::array<ImU32, 256> >
Cividis         = { "Cividis",              { 0xFF4E2200, 0xFF4F2301, 0xFF502301, 0xFF522402, 0xFF532503, 0xFF542503, 0xFF552604, 0xFF562704, 0xFF582705, 0xFF592806, 0xFF5A2906, 0xFF5B2907, 0xFF5C2A08, 0xFF5E2B08, 0xFF5F2B09, 0xFF602C0A, 0xFF612D0A, 0xFF622D0B, 0xFF642E0B, 0xFF652F0C, 0xFF662F0D, 0xFF67300D, 0xFF68310E, 0xFF6A310F, 0xFF6B320F, 0xFF6C3310, 0xFF6D3311, 0xFF6E3411, 0xFF703512, 0xFF703513, 0xFF703614, 0xFF703716, 0xFF6F3817, 0xFF6F3819, 0xFF6F391A, 0xFF6F3A1C, 0xFF6F3A1D, 0xFF6F3B1F, 0xFF6F3C20, 0xFF6E3D21, 0xFF6E3D23, 0xFF6E3E24, 0xFF6E3F26, 0xFF6E3F27, 0xFF6E4029, 0xFF6E412A, 0xFF6D422C, 0xFF6D422D, 0xFF6D432F, 0xFF6D4430, 0xFF6D4431, 0xFF6D4533, 0xFF6D4634, 0xFF6D4636, 0xFF6C4737, 0xFF6C4839, 0xFF6C493A, 0xFF6C493B, 0xFF6C4A3C, 0xFF6C4B3D, 0xFF6C4B3E, 0xFF6C4C3F, 0xFF6C4D40, 0xFF6C4E41, 0xFF6C4E42, 0xFF6C4F43, 0xFF6C5044, 0xFF6C5045, 0xFF6C5146, 0xFF6C5247, 0xFF6C5248, 0xFF6D5349, 0xFF6D544A, 0xFF6D554B, 0xFF6D554C, 0xFF6D564D, 0xFF6D574E, 0xFF6D574F, 0xFF6D5850, 0xFF6D5951, 0xFF6D5A52, 0xFF6D5A53, 0xFF6D5B54, 0xFF6D5C55, 0xFF6D5C56, 0xFF6D5D57, 0xFF6D5E58, 0xFF6D5E59, 0xFF6E5F5A, 0xFF6E605B, 0xFF6E615B, 0xFF6E615C, 0xFF6F625D, 0xFF6F635E, 0xFF6F635F, 0xFF6F6460, 0xFF6F6561, 0xFF706662, 0xFF706663, 0xFF706763, 0xFF706864, 0xFF706865, 0xFF716966, 0xFF716A67, 0xFF716A68, 0xFF716B69, 0xFF716C6A, 0xFF726D6B, 0xFF726D6B, 0xFF726E6C, 0xFF726F6D, 0xFF736F6E, 0xFF73706F, 0xFF737170, 0xFF737271, 0xFF737272, 0xFF737373, 0xFF747473, 0xFF747574, 0xFF747575, 0xFF747676, 0xFF747777, 0xFF757778, 0xFF757879, 0xFF75797A, 0xFF757A7B, 0xFF757A7C, 0xFF757B7D, 0xFF767C7D, 0xFF767D7E, 0xFF767D7F, 0xFF767E80, 0xFF767F81, 0xFF768082, 0xFF778083, 0xFF778184, 0xFF778285, 0xFF778286, 0xFF778387, 0xFF788487, 0xFF788588, 0xFF788589, 0xFF78868A, 0xFF78878B, 0xFF78888C, 0xFF78898D, 0xFF77898E, 0xFF778A8F, 0xFF778B90, 0xFF778C91, 0xFF778C92, 0xFF778D93, 0xFF778E94, 0xFF768F95, 0xFF768F96, 0xFF769097, 0xFF769198, 0xFF769299, 0xFF769399, 0xFF76939A, 0xFF75949B, 0xFF75959C, 0xFF75969D, 0xFF75969E, 0xFF75979F, 0xFF7598A0, 0xFF7599A1, 0xFF749AA2, 0xFF749AA3, 0xFF749BA4, 0xFF749CA5, 0xFF749DA6, 0xFF739EA7, 0xFF739EA8, 0xFF729FA9, 0xFF72A0AA, 0xFF72A1AB, 0xFF71A2AC, 0xFF71A2AD, 0xFF71A3AE, 0xFF70A4B0, 0xFF70A5B1, 0xFF6FA6B2, 0xFF6FA6B3, 0xFF6FA7B4, 0xFF6EA8B5, 0xFF6EA9B6, 0xFF6DAAB7, 0xFF6DABB8, 0xFF6DABB9, 0xFF6CACBA, 0xFF6CADBB, 0xFF6BAEBC, 0xFF6BAFBD, 0xFF6BAFBE, 0xFF6AB0BF, 0xFF6AB1C0, 0xFF6AB2C2, 0xFF69B3C3, 0xFF69B4C4, 0xFF68B4C5, 0xFF67B5C6, 0xFF66B6C7, 0xFF66B7C8, 0xFF65B8C9, 0xFF64B9CA, 0xFF64BACB, 0xFF63BBCC, 0xFF62BBCD, 0xFF62BCCE, 0xFF61BDCF, 0xFF60BED0, 0xFF5FBFD1, 0xFF5FC0D2, 0xFF5EC1D4, 0xFF5DC2D5, 0xFF5DC3D6, 0xFF5CC3D7, 0xFF5BC4D8, 0xFF5AC5D9, 0xFF5AC6DA, 0xFF59C7DB, 0xFF58C8DC, 0xFF58C9DD, 0xFF57CADE, 0xFF56CBDF, 0xFF55CBE0, 0xFF55CCE1, 0xFF54CDE2, 0xFF53CEE3, 0xFF52CFE4, 0xFF51D0E5, 0xFF50D1E6, 0xFF4FD2E7, 0xFF4ED3E8, 0xFF4CD4EA, 0xFF4BD5EB, 0xFF4AD6EC, 0xFF49D7ED, 0xFF48D8EE, 0xFF47D9EF, 0xFF46DAF0, 0xFF45DBF1, 0xFF44DCF2, 0xFF43DDF3, 0xFF42DEF4, 0xFF41DFF5, 0xFF40E0F6, 0xFF3FE1F7, 0xFF3EE2F8, 0xFF3DE3F9, 0xFF3CE4FA, 0xFF3BE5FB, 0xFF3AE6FC, 0xFF39E7FD, 0xFF38E8FE } };


inline constexpr std::pair<const char *, std::array<ImU32, 256> >
Csv             = { "Csv",                  { 0xFF0000FF, 0xFF0006FF, 0xFF000CFF, 0xFF0011FF, 0xFF0017FF, 0xFF001DFF, 0xFF0023FF, 0xFF0029FF, 0xFF002FFF, 0xFF0034FF, 0xFF003AFF, 0xFF0040FF, 0xFF0046FF, 0xFF004CFF, 0xFF0052FF, 0xFF0057FF, 0xFF005DFF, 0xFF0063FF, 0xFF0069FF, 0xFF006FFF, 0xFF0075FF, 0xFF007AFF, 0xFF0080FF, 0xFF0086FF, 0xFF008CFF, 0xFF0092FF, 0xFF0098FF, 0xFF009DFF, 0xFF00A3FF, 0xFF00A7FD, 0xFF00AAFA, 0xFF00AEF8, 0xFF00B1F5, 0xFF00B4F2, 0xFF00B7F0, 0xFF00BAED, 0xFF00BDEA, 0xFF00C1E8, 0xFF00C4E5, 0xFF00C7E2, 0xFF00CAE0, 0xFF00CDDD, 0xFF00D1DA, 0xFF00D4D8, 0xFF00D7D5, 0xFF00DAD2, 0xFF00DDCF, 0xFF00E0CD, 0xFF00E4CA, 0xFF00E7C7, 0xFF00EAC5, 0xFF00EDC2, 0xFF00F0BF, 0xFF00F4BD, 0xFF00F7BA, 0xFF00FAB7, 0xFF00FDB5, 0xFF00FFB1, 0xFF00FFAB, 0xFF00FFA5, 0xFF00FF9F, 0xFF00FF98, 0xFF00FF92, 0xFF00FF8C, 0xFF00FF86, 0xFF00FF80, 0xFF00FF7A, 0xFF00FF74, 0xFF00FF6E, 0xFF00FF68, 0xFF00FF62, 0xFF00FF5C, 0xFF00FF56, 0xFF00FF50, 0xFF00FF4A, 0xFF00FF44, 0xFF00FF3E, 0xFF00FF38, 0xFF00FF32, 0xFF00FF2C, 0xFF00FF26, 0xFF00FF20, 0xFF00FF1A, 0xFF00FF14, 0xFF00FF0E, 0xFF00FF08, 0xFF06FF08, 0xFF0CFF07, 0xFF11FF07, 0xFF17FF07, 0xFF1CFF07, 0xFF22FF06, 0xFF27FF06, 0xFF2DFF06, 0xFF32FF05, 0xFF38FF05, 0xFF3DFF05, 0xFF43FF05, 0xFF49FF04, 0xFF4EFF04, 0xFF54FF04, 0xFF59FF03, 0xFF5FFF03, 0xFF64FF03, 0xFF6AFF03, 0xFF6FFF02, 0xFF75FF02, 0xFF7AFF02, 0xFF80FF01, 0xFF86FF01, 0xFF8BFF01, 0xFF91FF01, 0xFF96FF00, 0xFF9CFF00, 0xFFA0FD00, 0xFFA3FA00, 0xFFA7F800, 0xFFAAF500, 0xFFADF300, 0xFFB1F000, 0xFFB4ED00, 0xFFB8EB00, 0xFFBBE800, 0xFFBFE600, 0xFFC2E300, 0xFFC5E000, 0xFFC9DE00, 0xFFCCDB00, 0xFFD0D900, 0xFFD3D600, 0xFFD7D400, 0xFFDAD100, 0xFFDDCE00, 0xFFE1CC00, 0xFFE4C900, 0xFFE8C700, 0xFFEBC400, 0xFFEFC100, 0xFFF2BF00, 0xFFF5BC00, 0xFFF9BA00, 0xFFFCB700, 0xFFFFB400, 0xFFFFAE00, 0xFFFFA800, 0xFFFFA200, 0xFFFF9C00, 0xFFFF9700, 0xFFFF9100, 0xFFFF8B00, 0xFFFF8500, 0xFFFF7F00, 0xFFFF7900, 0xFFFF7400, 0xFFFF6E00, 0xFFFF6800, 0xFFFF6200, 0xFFFF5C00, 0xFFFF5600, 0xFFFF5100, 0xFFFF4B00, 0xFFFF4500, 0xFFFF3F00, 0xFFFF3900, 0xFFFF3300, 0xFFFF2E00, 0xFFFF2800, 0xFFFF2200, 0xFFFF1C00, 0xFFFF1600, 0xFFFF1000, 0xFFFF0F05, 0xFFFF0F0A, 0xFFFF0E10, 0xFFFF0E15, 0xFFFF0D1B, 0xFFFF0D20, 0xFFFF0C26, 0xFFFF0C2B, 0xFFFF0B31, 0xFFFF0A36, 0xFFFF0A3C, 0xFFFF0941, 0xFFFF0947, 0xFFFF084C, 0xFFFF0852, 0xFFFF0757, 0xFFFF065D, 0xFFFF0662, 0xFFFF0568, 0xFFFF056D, 0xFFFF0473, 0xFFFF0478, 0xFFFF037D, 0xFFFF0283, 0xFFFF0288, 0xFFFF018E, 0xFFFF0193, 0xFFFF0099, 0xFFFE009D, 0xFFFB00A1, 0xFFF900A4, 0xFFF700A8, 0xFFF400AB, 0xFFF200AF, 0xFFF000B2, 0xFFED00B6, 0xFFEB00B9, 0xFFE900BD, 0xFFE600C0, 0xFFE400C4, 0xFFE200C8, 0xFFDF00CB, 0xFFDD00CF, 0xFFDB00D2, 0xFFD800D6, 0xFFD600D9, 0xFFD400DD, 0xFFD100E0, 0xFFCF00E4, 0xFFCD00E7, 0xFFCA00EB, 0xFFC800EE, 0xFFC600F2, 0xFFC300F5, 0xFFC100F9, 0xFFBF00FD, 0xFFBB00FF, 0xFFB500FF, 0xFFB000FF, 0xFFAA00FF, 0xFFA400FF, 0xFF9E00FF, 0xFF9800FF, 0xFF9200FF, 0xFF8D00FF, 0xFF8700FF, 0xFF8100FF, 0xFF7B00FF, 0xFF7500FF, 0xFF6F00FF, 0xFF6A00FF, 0xFF6400FF, 0xFF5E00FF, 0xFF5800FF, 0xFF5200FF, 0xFF4C00FF, 0xFF4700FF, 0xFF4100FF, 0xFF3B00FF, 0xFF3500FF, 0xFF2F00FF, 0xFF2900FF, 0xFF2400FF, 0xFF1E00FF, 0xFF1800FF } };


inline constexpr std::pair<const char *, std::array<ImU32, 256> >
Turbo           = { "Turbo",                { 0xFF3B1230, 0xFF401531, 0xFF461832, 0xFF4B1A32, 0xFF511D33, 0xFF562034, 0xFF5C2335, 0xFF612635, 0xFF672836, 0xFF6C2B37, 0xFF722E38, 0xFF773139, 0xFF7D3339, 0xFF82363A, 0xFF88393B, 0xFF8D3C3C, 0xFF933F3C, 0xFF98413D, 0xFF9E443E, 0xFFA3473F, 0xFFA94A40, 0xFFAE4D40, 0xFFB34F41, 0xFFB95242, 0xFFBE5543, 0xFFC45843, 0xFFC95B44, 0xFFCF5D45, 0xFFD46046, 0xFFD76346, 0xFFD86545, 0xFFD96845, 0xFFDB6A44, 0xFFDC6D44, 0xFFDD6F43, 0xFFDF7242, 0xFFE07442, 0xFFE17741, 0xFFE27941, 0xFFE47C40, 0xFFE57E40, 0xFFE6813F, 0xFFE7833F, 0xFFE9863E, 0xFFEA883E, 0xFFEB8B3D, 0xFFED8D3D, 0xFFEE903C, 0xFFEF923C, 0xFFF0953B, 0xFFF2973B, 0xFFF39A3A, 0xFFF49C39, 0xFFF59F39, 0xFFF7A138, 0xFFF8A438, 0xFFF9A637, 0xFFF9A937, 0xFFF7AB36, 0xFFF4AD35, 0xFFF2AF34, 0xFFEFB133, 0xFFEDB331, 0xFFEBB630, 0xFFE8B82F, 0xFFE6BA2E, 0xFFE3BC2D, 0xFFE1BE2C, 0xFFDFC02B, 0xFFDCC22A, 0xFFDAC429, 0xFFD7C728, 0xFFD5C927, 0xFFD3CB26, 0xFFD0CD25, 0xFFCECF24, 0xFFCBD123, 0xFFC9D322, 0xFFC7D521, 0xFFC4D720, 0xFFC2DA1F, 0xFFBFDC1E, 0xFFBDDE1D, 0xFFBBE01C, 0xFFB8E21B, 0xFFB6E41A, 0xFFB3E51D, 0xFFB0E620, 0xFFADE723, 0xFFA9E827, 0xFFA6E92A, 0xFFA3EA2D, 0xFFA0EB30, 0xFF9DEB33, 0xFF9AEC36, 0xFF97ED39, 0xFF94EE3C, 0xFF91EF3F, 0xFF8EF042, 0xFF8BF145, 0xFF88F248, 0xFF85F34B, 0xFF81F44F, 0xFF7EF552, 0xFF7BF655, 0xFF78F658, 0xFF75F75B, 0xFF72F85E, 0xFF6FF961, 0xFF6CFA64, 0xFF69FB67, 0xFF66FC6A, 0xFF63FD6D, 0xFF60FE70, 0xFF5EFE73, 0xFF5CFD76, 0xFF5BFD79, 0xFF59FC7D, 0xFF58FB80, 0xFF56FB83, 0xFF55FA86, 0xFF53FA89, 0xFF52F98C, 0xFF50F98F, 0xFF4FF892, 0xFF4DF895, 0xFF4CF798, 0xFF4AF79B, 0xFF49F69E, 0xFF47F6A1, 0xFF46F5A4, 0xFF44F5A7, 0xFF43F4AA, 0xFF41F4AD, 0xFF40F3B0, 0xFF3EF3B3, 0xFF3DF2B6, 0xFF3BF2B9, 0xFF3AF1BC, 0xFF38F0C0, 0xFF37F0C3, 0xFF35EFC6, 0xFF34EFC8, 0xFF34EDCA, 0xFF34EBCC, 0xFF35E9CE, 0xFF35E7CF, 0xFF35E5D1, 0xFF35E3D3, 0xFF35E1D5, 0xFF35E0D7, 0xFF36DED8, 0xFF36DCDA, 0xFF36DADC, 0xFF36D8DE, 0xFF36D6DF, 0xFF37D4E1, 0xFF37D3E3, 0xFF37D1E5, 0xFF37CFE6, 0xFF37CDE8, 0xFF37CBEA, 0xFF38C9EC, 0xFF38C7ED, 0xFF38C5EF, 0xFF38C4F1, 0xFF38C2F3, 0xFF38C0F5, 0xFF39BEF6, 0xFF39BCF8, 0xFF39BAFA, 0xFF38B7FA, 0xFF37B5FA, 0xFF36B2F9, 0xFF34AFF9, 0xFF33ACF9, 0xFF32A9F9, 0xFF31A6F9, 0xFF30A3F9, 0xFF2FA0F8, 0xFF2D9EF8, 0xFF2C9BF8, 0xFF2B98F8, 0xFF2A95F8, 0xFF2992F8, 0xFF288FF7, 0xFF268CF7, 0xFF258AF7, 0xFF2487F7, 0xFF2384F7, 0xFF2281F6, 0xFF217EF6, 0xFF1F7BF6, 0xFF1E78F6, 0xFF1D76F6, 0xFF1C73F6, 0xFF1B70F5, 0xFF1A6DF5, 0xFF186AF5, 0xFF1868F4, 0xFF1765F3, 0xFF1663F1, 0xFF1561F0, 0xFF155FEE, 0xFF145DEC, 0xFF135AEB, 0xFF1358E9, 0xFF1256E8, 0xFF1154E6, 0xFF1151E5, 0xFF104FE3, 0xFF0F4DE2, 0xFF0E4BE0, 0xFF0E48DF, 0xFF0D46DD, 0xFF0C44DC, 0xFF0C42DA, 0xFF0B40D9, 0xFF0A3DD7, 0xFF093BD6, 0xFF0939D4, 0xFF0837D3, 0xFF0734D1, 0xFF0732D0, 0xFF0630CE, 0xFF052ECD, 0xFF042CCB, 0xFF042AC9, 0xFF0428C6, 0xFF0427C3, 0xFF0426C1, 0xFF0424BE, 0xFF0423BB, 0xFF0422B8, 0xFF0420B5, 0xFF041FB3, 0xFF041EB0, 0xFF041CAD, 0xFF041BAA, 0xFF0419A7, 0xFF0418A4, 0xFF0317A2, 0xFF03159F, 0xFF03149C, 0xFF031399, 0xFF031196, 0xFF031093, 0xFF030F91, 0xFF030D8E, 0xFF030C8B, 0xFF030B88, 0xFF030985, 0xFF030882, 0xFF030780, 0xFF03057D, 0xFF03047A } };


inline constexpr std::pair<const char *, std::array<ImU32, 256> >
Berlin          = { "Berlin",               { 0xFFFFB09E, 0xFFFEB09C, 0xFFFDAF9A, 0xFFFCAF97, 0xFFFBAF95, 0xFFFAAF93, 0xFFF9AE91, 0xFFF8AE8E, 0xFFF7AE8C, 0xFFF6AD8A, 0xFFF5AD88, 0xFFF4AD86, 0xFFF3AC83, 0xFFF2AC81, 0xFFF0AC7F, 0xFFEFAB7C, 0xFFEEAB7A, 0xFFECAA78, 0xFFEBAA75, 0xFFEAA973, 0xFFE8A970, 0xFFE7A86E, 0xFFE5A86C, 0xFFE4A769, 0xFFE3A667, 0xFFE1A664, 0xFFE0A562, 0xFFDFA55F, 0xFFDCA35D, 0xFFDAA25B, 0xFFD8A159, 0xFFD6A056, 0xFFD39E54, 0xFFD19D52, 0xFFCF9C4F, 0xFFCD9B4D, 0xFFCB994B, 0xFFC89849, 0xFFC69746, 0xFFC49644, 0xFFC29442, 0xFFBF9340, 0xFFBD913F, 0xFFBB8F3E, 0xFFB88D3D, 0xFFB68C3B, 0xFFB38A3A, 0xFFB18839, 0xFFAF8638, 0xFFAC8537, 0xFFAA8336, 0xFFA88134, 0xFFA57F33, 0xFFA37D32, 0xFFA17C31, 0xFF9E7A30, 0xFF9B782F, 0xFF99762E, 0xFF96742E, 0xFF94722D, 0xFF91702C, 0xFF8F6E2B, 0xFF8C6C2A, 0xFF896A29, 0xFF876829, 0xFF846628, 0xFF826427, 0xFF7F6226, 0xFF7D6025, 0xFF7B5F25, 0xFF785D24, 0xFF765B23, 0xFF745A23, 0xFF725822, 0xFF705621, 0xFF6D5421, 0xFF6B5320, 0xFF69511F, 0xFF674F1F, 0xFF654E1E, 0xFF624C1D, 0xFF604A1D, 0xFF5E481C, 0xFF5B471C, 0xFF59451B, 0xFF57431A, 0xFF54411A, 0xFF523F19, 0xFF503E19, 0xFF4D3C18, 0xFF4B3A17, 0xFF493817, 0xFF463616, 0xFF443516, 0xFF423315, 0xFF403115, 0xFF3E3014, 0xFF3C2F14, 0xFF3A2D14, 0xFF382C13, 0xFF362A13, 0xFF342913, 0xFF322813, 0xFF302612, 0xFF2E2512, 0xFF2D2312, 0xFF2B2211, 0xFF292011, 0xFF271F11, 0xFF251E11, 0xFF241D11, 0xFF221C12, 0xFF201B12, 0xFF1F1A12, 0xFF1D1912, 0xFF1C1812, 0xFF1A1612, 0xFF181512, 0xFF171413, 0xFF151313, 0xFF131213, 0xFF121113, 0xFF111014, 0xFF101015, 0xFF0F1016, 0xFF0E0F17, 0xFF0D0F18, 0xFF0C0E19, 0xFF0A0E1A, 0xFF090D1B, 0xFF080D1C, 0xFF070C1D, 0xFF060C1E, 0xFF050C1F, 0xFF040B20, 0xFF040B21, 0xFF030C22, 0xFF030C23, 0xFF030C25, 0xFF030C26, 0xFF020D27, 0xFF020D28, 0xFF020D29, 0xFF010E2B, 0xFF010E2C, 0xFF010E2D, 0xFF000F2E, 0xFF000F2F, 0xFF000F30, 0xFF000F32, 0xFF001033, 0xFF001034, 0xFF001036, 0xFF001137, 0xFF001138, 0xFF01113A, 0xFF01113B, 0xFF01123C, 0xFF01123E, 0xFF01123F, 0xFF011340, 0xFF011342, 0xFF011443, 0xFF021445, 0xFF021547, 0xFF031649, 0xFF03164A, 0xFF04174C, 0xFF04184E, 0xFF051850, 0xFF051951, 0xFF051A53, 0xFF061A55, 0xFF061B57, 0xFF071C58, 0xFF081D5A, 0xFF091E5C, 0xFF0A1F5E, 0xFF0B2160, 0xFF0C2262, 0xFF0E2365, 0xFF0F2467, 0xFF102669, 0xFF11276B, 0xFF12286D, 0xFF14296F, 0xFF152B71, 0xFF162C73, 0xFF172D75, 0xFF192F77, 0xFF1B317A, 0xFF1D337C, 0xFF1F357E, 0xFF213780, 0xFF233882, 0xFF253A84, 0xFF273C87, 0xFF293E89, 0xFF2B408B, 0xFF2E428D, 0xFF30448F, 0xFF324692, 0xFF344794, 0xFF364995, 0xFF384B97, 0xFF3A4D99, 0xFF3C4F9B, 0xFF3E509D, 0xFF41529F, 0xFF4354A1, 0xFF4556A3, 0xFF4757A5, 0xFF4959A7, 0xFF4B5BA9, 0xFF4D5DAB, 0xFF505FAD, 0xFF5261AF, 0xFF5463B1, 0xFF5765B3, 0xFF5967B5, 0xFF5C69B7, 0xFF5E6BB9, 0xFF606DBB, 0xFF636FBD, 0xFF6571BF, 0xFF6773C1, 0xFF6A75C3, 0xFF6C77C5, 0xFF6E79C8, 0xFF717BCA, 0xFF737CCC, 0xFF757ECE, 0xFF7880D0, 0xFF7A82D2, 0xFF7D84D4, 0xFF7F86D6, 0xFF8188D8, 0xFF848ADA, 0xFF868CDC, 0xFF888EDE, 0xFF8B90E0, 0xFF8D92E2, 0xFF8F94E4, 0xFF9196E6, 0xFF9498E8, 0xFF969AEA, 0xFF989CEC, 0xFF9B9EEE, 0xFF9DA0F0, 0xFF9FA1F3, 0xFFA2A3F5, 0xFFA4A5F7, 0xFFA6A7F9, 0xFFA8A9FB, 0xFFABABFD, 0xFFADADFF } };


inline constexpr std::pair<const char *, std::array<ImU32, 256> >
CMRmap          = { "CMRmap",               { 0xFF000000, 0xFF040101, 0xFF080202, 0xFF0C0404, 0xFF100505, 0xFF140606, 0xFF180707, 0xFF1B0909, 0xFF1F0A0A, 0xFF230B0B, 0xFF270C0C, 0xFF2B0D0D, 0xFF2F0E0E, 0xFF320F0F, 0xFF361010, 0xFF3A1111, 0xFF3E1212, 0xFF421414, 0xFF461515, 0xFF4A1616, 0xFF4D1717, 0xFF511818, 0xFF551A1A, 0xFF591B1B, 0xFF5D1C1C, 0xFF611D1D, 0xFF651E1F, 0xFF691F20, 0xFF6E2121, 0xFF722223, 0xFF762324, 0xFF7A2425, 0xFF7E2527, 0xFF822628, 0xFF842629, 0xFF86262A, 0xFF88262B, 0xFF8A262D, 0xFF8C262E, 0xFF8E262F, 0xFF902630, 0xFF922631, 0xFF942632, 0xFF962633, 0xFF982634, 0xFF9A2636, 0xFF9B2637, 0xFF9D2638, 0xFF9F2639, 0xFFA1263A, 0xFFA3263C, 0xFFA5263D, 0xFFA7263E, 0xFFA9263F, 0xFFAB2640, 0xFFAD2641, 0xFFAF2642, 0xFFB12643, 0xFFB22645, 0xFFB42646, 0xFFB52648, 0xFFB6264A, 0xFFB7274B, 0xFFB8274D, 0xFFB9274F, 0xFFBA2751, 0xFFBB2752, 0xFFB92755, 0xFFB72857, 0xFFB52859, 0xFFB3295C, 0xFFB1295E, 0xFFAF2960, 0xFFAD2A63, 0xFFAB2A65, 0xFFA92A67, 0xFFA72B6A, 0xFFA52B6C, 0xFFA32C6E, 0xFFA12C70, 0xFF9F2D73, 0xFF9E2D75, 0xFF9C2E77, 0xFF9A2E79, 0xFF982F7C, 0xFF962F7E, 0xFF942F80, 0xFF923083, 0xFF903085, 0xFF8E3087, 0xFF8C318A, 0xFF8A318C, 0xFF873290, 0xFF853293, 0xFF823296, 0xFF7F3399, 0xFF7D339C, 0xFF7A339F, 0xFF7834A2, 0xFF7534A5, 0xFF7235A8, 0xFF7035AB, 0xFF6D36AE, 0xFF6A36B1, 0xFF6837B4, 0xFF6537B7, 0xFF6238BA, 0xFF6038BD, 0xFF5D38C1, 0xFF5A39C4, 0xFF5739C7, 0xFF5539CA, 0xFF523ACD, 0xFF4F3AD0, 0xFF4C3BD3, 0xFF4A3BD6, 0xFF473BD9, 0xFF443CDD, 0xFF423CE0, 0xFF3F3CE3, 0xFF3C3DE6, 0xFF3A3DE9, 0xFF373DEC, 0xFF343EF0, 0xFF323FF2, 0xFF3040F3, 0xFF2D41F4, 0xFF2B43F5, 0xFF2944F7, 0xFF2746F8, 0xFF2447F9, 0xFF2248FA, 0xFF204AFB, 0xFF1F4CFA, 0xFF1E4EF9, 0xFF1D50F8, 0xFF1C52F8, 0xFF1A54F7, 0xFF1956F6, 0xFF1858F6, 0xFF1759F5, 0xFF165BF4, 0xFF155DF3, 0xFF145FF3, 0xFF1261F2, 0xFF1163F1, 0xFF1065F1, 0xFF0F67F0, 0xFF0E69EF, 0xFF0D6BEE, 0xFF0C6DED, 0xFF0B6FED, 0xFF0971EC, 0xFF0873EB, 0xFF0774EA, 0xFF0676E9, 0xFF0478E8, 0xFF047BE8, 0xFF047DE8, 0xFF047FE7, 0xFF0481E7, 0xFF0583E7, 0xFF0586E7, 0xFF0588E6, 0xFF058AE6, 0xFF058CE6, 0xFF068EE6, 0xFF0790E6, 0xFF0892E6, 0xFF0894E6, 0xFF0996E6, 0xFF0A98E6, 0xFF0B9AE6, 0xFF0B9CE6, 0xFF0C9EE6, 0xFF0D9FE6, 0xFF0DA1E6, 0xFF0EA3E6, 0xFF0FA5E6, 0xFF10A7E6, 0xFF10A9E6, 0xFF11ABE6, 0xFF12ADE6, 0xFF13AFE6, 0xFF14B1E6, 0xFF14B3E6, 0xFF15B5E6, 0xFF16B7E6, 0xFF17B9E6, 0xFF18BBE6, 0xFF1ABCE6, 0xFF1DBEE6, 0xFF20BFE6, 0xFF23C1E6, 0xFF26C2E6, 0xFF28C4E6, 0xFF2BC5E6, 0xFF2EC6E6, 0xFF31C8E6, 0xFF34C9E6, 0xFF37CAE6, 0xFF3BCBE6, 0xFF3ECDE6, 0xFF41CEE6, 0xFF44CFE6, 0xFF47D0E6, 0xFF4AD2E6, 0xFF4DD3E6, 0xFF50D4E6, 0xFF53D5E6, 0xFF56D6E6, 0xFF59D8E6, 0xFF5CD9E6, 0xFF5FDAE6, 0xFF62DBE6, 0xFF65DCE6, 0xFF69DDE6, 0xFF6CDEE6, 0xFF6FDFE6, 0xFF72E1E6, 0xFF75E2E6, 0xFF78E3E6, 0xFF7CE4E6, 0xFF80E5E7, 0xFF84E6E7, 0xFF88E7E8, 0xFF8DE8E9, 0xFF91E9EA, 0xFF95EAEA, 0xFF9AEBEB, 0xFF9EECEC, 0xFFA2EDED, 0xFFA6EDED, 0xFFAAEEEE, 0xFFAEEFEF, 0xFFB2EFEF, 0xFFB5F0F0, 0xFFB9F1F1, 0xFFBDF2F2, 0xFFC1F2F2, 0xFFC5F3F3, 0xFFC9F4F4, 0xFFCDF5F5, 0xFFD0F6F6, 0xFFD4F7F7, 0xFFD8F7F7, 0xFFDCF8F8, 0xFFE0F9F9, 0xFFE4FAFA, 0xFFE7FBFB, 0xFFEBFBFB, 0xFFEFFCFC, 0xFFF3FDFD, 0xFFF7FEFE, 0xFFFBFEFE, 0xFFFFFFFF } };


inline constexpr std::pair<const char *, std::array<ImU32, 256> >
Managua         = { "Managua",              { 0xFF67CFFF, 0xFF66CDFE, 0xFF66CBFD, 0xFF65C9FB, 0xFF65C7FA, 0xFF64C5F9, 0xFF63C3F8, 0xFF63C1F6, 0xFF62BFF5, 0xFF62BEF4, 0xFF61BCF3, 0xFF60BAF2, 0xFF60B8F0, 0xFF5FB6EF, 0xFF5FB5EE, 0xFF5EB3ED, 0xFF5DB1EC, 0xFF5DAFEA, 0xFF5CADE9, 0xFF5CACE8, 0xFF5BAAE7, 0xFF5AA8E6, 0xFF5AA6E4, 0xFF59A4E3, 0xFF58A2E2, 0xFF58A0E1, 0xFF579FDF, 0xFF569DDE, 0xFF569BDD, 0xFF5599DC, 0xFF5497DB, 0xFF5395D9, 0xFF5393D8, 0xFF5291D7, 0xFF518FD6, 0xFF518ED4, 0xFF508CD3, 0xFF508AD2, 0xFF4F89D1, 0xFF4F87D0, 0xFF4F86CE, 0xFF4E84CD, 0xFF4E83CC, 0xFF4D81CB, 0xFF4D7FCA, 0xFF4C7EC8, 0xFF4C7CC7, 0xFF4B7BC6, 0xFF4B79C5, 0xFF4A78C4, 0xFF4A76C2, 0xFF4975C1, 0xFF4974C0, 0xFF4872BF, 0xFF4871BD, 0xFF4770BC, 0xFF476EBB, 0xFF466DBA, 0xFF466BB9, 0xFF456AB7, 0xFF4568B6, 0xFF4467B4, 0xFF4465B3, 0xFF4363B2, 0xFF4362B0, 0xFF4260AF, 0xFF425FAE, 0xFF425DAC, 0xFF415CAB, 0xFF415BAA, 0xFF4059A8, 0xFF4058A7, 0xFF4057A6, 0xFF3F55A4, 0xFF3F54A3, 0xFF3F53A2, 0xFF3E51A0, 0xFF3E509F, 0xFF3E4F9D, 0xFF3D4D9C, 0xFF3D4C9A, 0xFF3C4B99, 0xFF3C4998, 0xFF3C4896, 0xFF3C4794, 0xFF3B4693, 0xFF3B4591, 0xFF3B4390, 0xFF3B428E, 0xFF3A418C, 0xFF3A408B, 0xFF3A3E89, 0xFF3A3D87, 0xFF3A3C86, 0xFF3A3B84, 0xFF393A82, 0xFF393981, 0xFF39387F, 0xFF39377D, 0xFF39367C, 0xFF39357A, 0xFF393479, 0xFF393377, 0xFF3A3276, 0xFF3A3174, 0xFF3A3173, 0xFF3A3071, 0xFF3A2F70, 0xFF3A2E6E, 0xFF3B2E6D, 0xFF3B2D6C, 0xFF3B2D6B, 0xFF3C2C69, 0xFF3C2B68, 0xFF3D2B67, 0xFF3D2A65, 0xFF3E2A64, 0xFF3E2A63, 0xFF3F2962, 0xFF402961, 0xFF402960, 0xFF41295F, 0xFF42285E, 0xFF43285C, 0xFF44285B, 0xFF45285A, 0xFF462959, 0xFF482958, 0xFF492958, 0xFF4B2957, 0xFF4C2A56, 0xFF4D2A55, 0xFF4F2A54, 0xFF502B53, 0xFF522C53, 0xFF532D52, 0xFF552D51, 0xFF572E51, 0xFF582F50, 0xFF5A2F4F, 0xFF5B304F, 0xFF5D314F, 0xFF5F324E, 0xFF61334E, 0xFF63344E, 0xFF64344E, 0xFF66354E, 0xFF68364D, 0xFF6A374D, 0xFF6C384D, 0xFF6D394D, 0xFF6F3A4D, 0xFF713C4D, 0xFF733D4C, 0xFF753E4C, 0xFF773F4C, 0xFF78414C, 0xFF7A424C, 0xFF7D444C, 0xFF7F454C, 0xFF81474C, 0xFF83484D, 0xFF854A4D, 0xFF874C4D, 0xFF894D4D, 0xFF8B4F4D, 0xFF8D504D, 0xFF8E524E, 0xFF90534E, 0xFF92554E, 0xFF93564E, 0xFF95584F, 0xFF97594F, 0xFF995B4F, 0xFF9A5C4F, 0xFF9C5D50, 0xFF9D5F50, 0xFF9F6051, 0xFFA06251, 0xFFA26351, 0xFFA36552, 0xFFA56652, 0xFFA66752, 0xFFA86953, 0xFFA96A53, 0xFFAB6C54, 0xFFAC6D54, 0xFFAE6F55, 0xFFAF7055, 0xFFB17256, 0xFFB27356, 0xFFB37557, 0xFFB57758, 0xFFB67958, 0xFFB77A59, 0xFFB97C5A, 0xFFBA7E5A, 0xFFBC7F5B, 0xFFBD815B, 0xFFBE835C, 0xFFBF845D, 0xFFC0865D, 0xFFC2875E, 0xFFC3895E, 0xFFC48B5F, 0xFFC58C60, 0xFFC78E60, 0xFFC88F61, 0xFFC99161, 0xFFCA9262, 0xFFCB9463, 0xFFCC9563, 0xFFCD9764, 0xFFCE9964, 0xFFCF9A65, 0xFFD09C66, 0xFFD29E66, 0xFFD39F67, 0xFFD4A167, 0xFFD5A368, 0xFFD6A469, 0xFFD8A669, 0xFFD9A86A, 0xFFDAAA6B, 0xFFDBAC6B, 0xFFDDAE6C, 0xFFDEB06D, 0xFFDFB26E, 0xFFE0B46E, 0xFFE1B66F, 0xFFE3B770, 0xFFE4B971, 0xFFE5BB71, 0xFFE6BD72, 0xFFE7BF73, 0xFFE8C173, 0xFFE9C374, 0xFFEAC475, 0xFFECC676, 0xFFEDC876, 0xFFEECA77, 0xFFEFCC78, 0xFFF0CE78, 0xFFF1D079, 0xFFF2D279, 0xFFF3D47A, 0xFFF4D57B, 0xFFF5D77B, 0xFFF6D97C, 0xFFF8DB7D, 0xFFF9DD7D, 0xFFFADF7E, 0xFFFBE17F, 0xFFFDE380, 0xFFFEE580, 0xFFFFE781 } };


inline constexpr std::pair<const char *, std::array<ImU32, 256> >
Vanimo         = { "Vanimo",               { 0xFFFDCDFF, 0xFFFBCAFE, 0xFFF9C7FC, 0xFFF7C5FB, 0xFFF5C2F9, 0xFFF3BFF8, 0xFFF1BCF6, 0xFFEEB9F5, 0xFFECB6F3, 0xFFEAB4F2, 0xFFE9B1F0, 0xFFE7AFEF, 0xFFE5ACED, 0xFFE3A9EC, 0xFFE1A7EA, 0xFFDFA4E8, 0xFFDDA2E7, 0xFFDB9FE5, 0xFFD99CE4, 0xFFD79AE2, 0xFFD597E1, 0xFFD395DF, 0xFFD192DE, 0xFFCF8FDD, 0xFFCD8DDB, 0xFFCB8ADA, 0xFFC988D8, 0xFFC785D6, 0xFFC583D4, 0xFFC380D2, 0xFFC17DD0, 0xFFBF7BCE, 0xFFBD78CD, 0xFFBB76CB, 0xFFB974C9, 0xFFB772C8, 0xFFB570C6, 0xFFB36DC4, 0xFFB26BC3, 0xFFB069C1, 0xFFAE67C0, 0xFFAC65BE, 0xFFAA63BD, 0xFFA962BB, 0xFFA760B9, 0xFFA55EB8, 0xFFA45CB6, 0xFFA25AB5, 0xFFA059B3, 0xFF9F57B2, 0xFF9D55B0, 0xFF9B54AE, 0xFF9952AC, 0xFF9750AA, 0xFF954FA8, 0xFF934DA6, 0xFF914CA4, 0xFF8F4AA2, 0xFF8D48A0, 0xFF8B479E, 0xFF88459B, 0xFF864499, 0xFF844296, 0xFF814094, 0xFF7F3F91, 0xFF7D3D8F, 0xFF7B3C8C, 0xFF783A8A, 0xFF763988, 0xFF743885, 0xFF723683, 0xFF703580, 0xFF6D347E, 0xFF6B327B, 0xFF693179, 0xFF673076, 0xFF642F74, 0xFF622D71, 0xFF602C6F, 0xFF5E2B6C, 0xFF5B2A6A, 0xFF592967, 0xFF572765, 0xFF552662, 0xFF522660, 0xFF50255D, 0xFF4E245B, 0xFF4C2358, 0xFF4A2255, 0xFF472153, 0xFF452050, 0xFF43204E, 0xFF411F4B, 0xFF3E1E48, 0xFF3C1D46, 0xFF3A1C43, 0xFF371B40, 0xFF351A3E, 0xFF331A3B, 0xFF301938, 0xFF2F1837, 0xFF2D1835, 0xFF2C1733, 0xFF2A1731, 0xFF29162F, 0xFF27162D, 0xFF25152C, 0xFF24152A, 0xFF231529, 0xFF221528, 0xFF211527, 0xFF201526, 0xFF1E1424, 0xFF1D1423, 0xFF1C1422, 0xFF1B1421, 0xFF1A1420, 0xFF1A1420, 0xFF19141F, 0xFF18141E, 0xFF18141E, 0xFF17141D, 0xFF16141C, 0xFF15141B, 0xFF15141B, 0xFF14151B, 0xFF14151A, 0xFF14151A, 0xFF13161A, 0xFF13161A, 0xFF131619, 0xFF121719, 0xFF121719, 0xFF121819, 0xFF12181A, 0xFF12191A, 0xFF111A1A, 0xFF111A1A, 0xFF111B1B, 0xFF111C1B, 0xFF111C1B, 0xFF111D1C, 0xFF111E1C, 0xFF111F1D, 0xFF12211D, 0xFF12221E, 0xFF12231E, 0xFF12241E, 0xFF12251F, 0xFF122620, 0xFF122720, 0xFF132921, 0xFF132A22, 0xFF132C23, 0xFF132D23, 0xFF142E24, 0xFF143025, 0xFF143126, 0xFF153327, 0xFF153528, 0xFF16372A, 0xFF16392B, 0xFF173B2C, 0xFF173D2D, 0xFF183F2E, 0xFF184130, 0xFF194331, 0xFF194532, 0xFF1A4634, 0xFF1A4835, 0xFF1B4A36, 0xFF1B4C38, 0xFF1C4E39, 0xFF1C503A, 0xFF1D513C, 0xFF1D533D, 0xFF1E553E, 0xFF1E573F, 0xFF1F5940, 0xFF1F5A42, 0xFF205C43, 0xFF205E44, 0xFF216045, 0xFF216146, 0xFF226348, 0xFF226549, 0xFF23664A, 0xFF24684B, 0xFF246A4D, 0xFF256C4E, 0xFF256E4F, 0xFF267051, 0xFF277152, 0xFF277354, 0xFF287555, 0xFF297757, 0xFF297958, 0xFF2A7B59, 0xFF2A7D5B, 0xFF2B7F5C, 0xFF2C815D, 0xFF2D825E, 0xFF2D8460, 0xFF2E8661, 0xFF2F8762, 0xFF308963, 0xFF308B65, 0xFF318D66, 0xFF328E67, 0xFF339069, 0xFF34926A, 0xFF35946B, 0xFF36966C, 0xFF37976E, 0xFF38996F, 0xFF399B71, 0xFF3B9D72, 0xFF3C9F74, 0xFF3DA175, 0xFF3FA477, 0xFF40A679, 0xFF42A87A, 0xFF43AA7C, 0xFF45AC7E, 0xFF47AF80, 0xFF49B182, 0xFF4CB484, 0xFF4EB686, 0xFF50B888, 0xFF52BB8A, 0xFF54BD8B, 0xFF57C08D, 0xFF5AC28F, 0xFF5CC591, 0xFF5FC793, 0xFF62CA95, 0xFF64CC97, 0xFF67CF99, 0xFF6AD19B, 0xFF6DD39D, 0xFF70D69F, 0xFF73D8A1, 0xFF76DBA3, 0xFF7ADDA5, 0xFF7DE0A7, 0xFF80E2A9, 0xFF83E5AB, 0xFF87E7AD, 0xFF8AEAAF, 0xFF8EEDB2, 0xFF92F0B4, 0xFF96F2B6, 0xFF9AF5B8, 0xFF9DF8BA, 0xFFA1FABC, 0xFFA5FDBE } };

inline constexpr std::pair<const char *, std::array<ImU32, 256> >
Gnuplot         = { "Gnuplot",              { 0xFF000000, 0xFF060006, 0xFF0C000B, 0xFF120011, 0xFF190016, 0xFF1F001C, 0xFF250021, 0xFF2B0027, 0xFF31002C, 0xFF37002F, 0xFF3C0031, 0xFF420033, 0xFF480036, 0xFF4E0038, 0xFF53003A, 0xFF59003C, 0xFF5F003F, 0xFF640041, 0xFF6A0042, 0xFF6F0044, 0xFF740046, 0xFF7A0048, 0xFF7F0049, 0xFF85004B, 0xFF8A004D, 0xFF8F004E, 0xFF950050, 0xFF9A0052, 0xFF9F0054, 0xFFA40155, 0xFFAA0157, 0xFFAF0159, 0xFFB4015A, 0xFFB9015C, 0xFFBD015D, 0xFFC1015F, 0xFFC50160, 0xFFC90161, 0xFFCC0162, 0xFFD00163, 0xFFD40165, 0xFFD80166, 0xFFDA0167, 0xFFDD0168, 0xFFE00169, 0xFFE2016B, 0xFFE5026C, 0xFFE8026D, 0xFFEA026E, 0xFFED026F, 0xFFEF0271, 0xFFF00272, 0xFFF20273, 0xFFF40274, 0xFFF50375, 0xFFF70376, 0xFFF80377, 0xFFFA0378, 0xFFFB0379, 0xFFFC037B, 0xFFFC037C, 0xFFFD037D, 0xFFFD047E, 0xFFFE047F, 0xFFFE0480, 0xFFFF0481, 0xFFFF0482, 0xFFFE0483, 0xFFFD0584, 0xFFFC0585, 0xFFFB0586, 0xFFFA0586, 0xFFF90687, 0xFFF80688, 0xFFF70689, 0xFFF5068A, 0xFFF3068B, 0xFFF1078C, 0xFFEF078D, 0xFFED078E, 0xFFEB078F, 0xFFE90890, 0xFFE70891, 0xFFE40891, 0xFFE10992, 0xFFDD0993, 0xFFDA0994, 0xFFD70A94, 0xFFD30A95, 0xFFD00A96, 0xFFCD0B97, 0xFFC90B97, 0xFFC40C98, 0xFFBF0C99, 0xFFBB0D9A, 0xFFB60D9B, 0xFFB20E9C, 0xFFAD0E9D, 0xFFA80F9E, 0xFFA30F9F, 0xFF9E10A0, 0xFF9910A1, 0xFF9411A1, 0xFF8F11A2, 0xFF8A12A3, 0xFF8412A4, 0xFF7F13A4, 0xFF7A13A5, 0xFF7514A6, 0xFF6F14A7, 0xFF6A14A7, 0xFF6415A8, 0xFF5F15A9, 0xFF5916A9, 0xFF5416AA, 0xFF4E17AB, 0xFF4918AC, 0xFF4318AC, 0xFF3D19AD, 0xFF371AAE, 0xFF311AAE, 0xFF2B1BAF, 0xFF251CB0, 0xFF1F1DB1, 0xFF1A1DB1, 0xFF171EB2, 0xFF131FB3, 0xFF1020B4, 0xFF0C20B4, 0xFF0921B5, 0xFF0522B6, 0xFF0223B7, 0xFF0023B7, 0xFF0024B8, 0xFF0025B9, 0xFF0026BA, 0xFF0027BA, 0xFF0028BB, 0xFF0029BC, 0xFF0029BC, 0xFF002ABD, 0xFF002BBE, 0xFF002CBE, 0xFF002DBF, 0xFF002EC0, 0xFF002FC0, 0xFF0030C1, 0xFF0031C1, 0xFF0032C2, 0xFF0033C3, 0xFF0034C3, 0xFF0035C4, 0xFF0036C4, 0xFF0037C5, 0xFF0038C6, 0xFF0039C6, 0xFF003AC7, 0xFF003BC8, 0xFF003CC8, 0xFF003EC9, 0xFF003FCA, 0xFF0040CA, 0xFF0042CB, 0xFF0043CC, 0xFF0044CD, 0xFF0046CD, 0xFF0047CE, 0xFF0048CF, 0xFF004ACF, 0xFF004BD0, 0xFF004CD0, 0xFF004ED1, 0xFF004FD2, 0xFF0050D2, 0xFF0052D3, 0xFF0053D3, 0xFF0054D4, 0xFF0056D5, 0xFF0057D5, 0xFF0058D6, 0xFF005AD6, 0xFF005BD7, 0xFF005DD8, 0xFF005ED8, 0xFF0060D9, 0xFF0061D9, 0xFF0063DA, 0xFF0064DB, 0xFF0066DB, 0xFF0068DC, 0xFF0069DC, 0xFF006BDD, 0xFF006DDE, 0xFF006FDE, 0xFF0071DF, 0xFF0073E0, 0xFF0074E0, 0xFF0076E1, 0xFF0078E1, 0xFF007AE2, 0xFF007CE2, 0xFF007EE3, 0xFF0080E3, 0xFF0081E4, 0xFF0083E4, 0xFF0085E5, 0xFF0087E5, 0xFF0089E6, 0xFF008BE6, 0xFF008DE7, 0xFF008FE8, 0xFF0091E8, 0xFF0093E9, 0xFF0095E9, 0xFF0097EA, 0xFF0099EB, 0xFF009BEB, 0xFF009DEB, 0xFF009FEC, 0xFF00A2EC, 0xFF00A4ED, 0xFF00A6ED, 0xFF00A8EE, 0xFF00AAEF, 0xFF00ADEF, 0xFF00B0F0, 0xFF00B3F0, 0xFF00B5F1, 0xFF00B8F2, 0xFF00BBF2, 0xFF00BDF3, 0xFF00C0F3, 0xFF00C2F4, 0xFF00C5F4, 0xFF00C7F5, 0xFF00CAF5, 0xFF00CCF6, 0xFF00CFF6, 0xFF00D1F7, 0xFF00D4F7, 0xFF00D6F8, 0xFF00D9F8, 0xFF00DBF9, 0xFF00DEF9, 0xFF00E1FA, 0xFF00E3FA, 0xFF00E6FB, 0xFF00E8FB, 0xFF00EBFC, 0xFF00EEFC, 0xFF00F1FD, 0xFF00F4FD, 0xFF00F7FE, 0xFF00F9FE, 0xFF00FCFF, 0xFF00FFFF } };

inline constexpr std::pair<const char *, std::array<ImU32, 256> >
Gnuplot2        = { "Gnuplot2",             { 0xFF000000, 0xFF040000, 0xFF080000, 0xFF0C0000, 0xFF100000, 0xFF140000, 0xFF180000, 0xFF1B0000, 0xFF1F0000, 0xFF230000, 0xFF270000, 0xFF2B0000, 0xFF2F0000, 0xFF320000, 0xFF360000, 0xFF3A0000, 0xFF3E0000, 0xFF420000, 0xFF460000, 0xFF4A0000, 0xFF4D0000, 0xFF510000, 0xFF550000, 0xFF590000, 0xFF5D0000, 0xFF610000, 0xFF660000, 0xFF6A0000, 0xFF6E0000, 0xFF730000, 0xFF770000, 0xFF7C0000, 0xFF800000, 0xFF840000, 0xFF880000, 0xFF8C0000, 0xFF900000, 0xFF940000, 0xFF980000, 0xFF9C0000, 0xFFA00000, 0xFFA40000, 0xFFA80000, 0xFFAB0000, 0xFFAF0000, 0xFFB30000, 0xFFB70000, 0xFFBB0000, 0xFFBE0000, 0xFFC20000, 0xFFC60000, 0xFFCA0000, 0xFFCE0000, 0xFFD20000, 0xFFD60000, 0xFFDA0000, 0xFFDE0000, 0xFFE20000, 0xFFE50000, 0xFFE90001, 0xFFEC0002, 0xFFEF0003, 0xFFF20004, 0xFFF60005, 0xFFF90005, 0xFFFC0006, 0xFFFF0008, 0xFFFF000B, 0xFFFF000E, 0xFFFF0011, 0xFFFF0014, 0xFFFF0017, 0xFFFF001A, 0xFFFF001D, 0xFFFF0020, 0xFFFF0023, 0xFFFF0026, 0xFFFF0029, 0xFFFF002C, 0xFFFF002F, 0xFFFF0032, 0xFFFF0035, 0xFFFF0038, 0xFFFF003B, 0xFFFF003E, 0xFFFF0041, 0xFFFF0044, 0xFFFF0047, 0xFFFF004A, 0xFFFF004D, 0xFFFF0050, 0xFFFF0054, 0xFFFF0057, 0xFFFF005A, 0xFFFF005E, 0xFFFF0061, 0xFFFF0065, 0xFFFF0068, 0xFFFF006C, 0xFFFF006F, 0xFFFF0072, 0xFFFF0075, 0xFFFF0078, 0xFFFF007B, 0xFFFF007E, 0xFFFF0081, 0xFFFF0084, 0xFFFF0087, 0xFFFD028A, 0xFFFB048D, 0xFFF90690, 0xFFF70893, 0xFFF50A96, 0xFFF30C99, 0xFFF10E9C, 0xFFEF109F, 0xFFEE11A2, 0xFFEC13A5, 0xFFEA15A8, 0xFFE817AB, 0xFFE619AF, 0xFFE41BB2, 0xFFE21DB5, 0xFFE01FB8, 0xFFDE21BB, 0xFFDC23BE, 0xFFD926C2, 0xFFD728C5, 0xFFD52AC9, 0xFFD32CCC, 0xFFD02FD0, 0xFFCE31D3, 0xFFCC33D6, 0xFFCA35D9, 0xFFC837DC, 0xFFC639DF, 0xFFC43BE3, 0xFFC23DE6, 0xFFC03FE9, 0xFFBE41EC, 0xFFBD42EF, 0xFFBB44F1, 0xFFB946F3, 0xFFB748F5, 0xFFB54AF7, 0xFFB34CF9, 0xFFB14EFB, 0xFFAF50FD, 0xFFAD52FF, 0xFFAB54FF, 0xFFA956FF, 0xFFA758FF, 0xFFA55AFF, 0xFFA35CFF, 0xFFA25DFF, 0xFFA05FFF, 0xFF9E61FF, 0xFF9B64FF, 0xFF9966FF, 0xFF9768FF, 0xFF956AFF, 0xFF936CFF, 0xFF906FFF, 0xFF8E71FF, 0xFF8C73FF, 0xFF8A75FF, 0xFF8877FF, 0xFF8679FF, 0xFF847BFF, 0xFF827DFF, 0xFF807FFF, 0xFF7E81FF, 0xFF7C83FF, 0xFF7A85FF, 0xFF7887FF, 0xFF7788FF, 0xFF758AFF, 0xFF738CFF, 0xFF718EFF, 0xFF6F90FF, 0xFF6D92FF, 0xFF6B94FF, 0xFF6996FF, 0xFF6798FF, 0xFF659AFF, 0xFF639CFF, 0xFF619EFF, 0xFF5FA0FF, 0xFF5DA2FF, 0xFF5BA4FF, 0xFF59A6FF, 0xFF57A8FF, 0xFF55AAFF, 0xFF53ACFF, 0xFF50AFFF, 0xFF4EB1FF, 0xFF4CB3FF, 0xFF4AB5FF, 0xFF48B7FF, 0xFF46B9FF, 0xFF44BBFF, 0xFF42BDFF, 0xFF40BFFF, 0xFF3EC1FF, 0xFF3CC3FF, 0xFF3AC5FF, 0xFF38C7FF, 0xFF36C9FF, 0xFF34CBFF, 0xFF32CDFF, 0xFF31CEFF, 0xFF2FD0FF, 0xFF2DD2FF, 0xFF2BD4FF, 0xFF29D6FF, 0xFF27D8FF, 0xFF25DAFF, 0xFF23DCFF, 0xFF21DEFF, 0xFF1FE0FF, 0xFF1DE2FF, 0xFF1BE4FF, 0xFF19E6FF, 0xFF17E8FF, 0xFF15EAFF, 0xFF13ECFF, 0xFF10EFFF, 0xFF0EF1FF, 0xFF0CF3FF, 0xFF0AF5FF, 0xFF08F7FF, 0xFF0BF9FF, 0xFF11F9FF, 0xFF17FAFF, 0xFF1DFBFF, 0xFF23FCFF, 0xFF29FDFF, 0xFF2FFEFF, 0xFF35FFFF, 0xFF3EFFFF, 0xFF4AFFFF, 0xFF56FFFF, 0xFF61FFFF, 0xFF6DFFFF, 0xFF79FFFF, 0xFF85FFFF, 0xFF91FFFF, 0xFF9DFFFF, 0xFFA9FFFF, 0xFFB5FFFF, 0xFFC2FFFF, 0xFFCEFFFF, 0xFFDAFFFF, 0xFFE6FFFF, 0xFFF3FFFF, 0xFFFFFFFF } };






// *************************************************************************** //
//
//
//  DEFINE AN ARRAY CONTAINING ALL OF THE COLOR MAPS...
// *************************************************************************** //
// *************************************************************************** //

inline constexpr std::pair< const char *,
                            std::array<ImU32, 256> >
DEF_COLORMAPS []   = {
    Blues,      Magma,      Inferno,    Cividis,    Csv,        Turbo,
    Berlin,     CMRmap,     Managua,    Vanimo,     Gnuplot,    Gnuplot2
};








//  "ANSI" ESCAPE KEYS...
//
/*
struct ANSI
{
    //      Basic colors.
    static constexpr std::string_view BLACK           = "\x1B[30m";
    static constexpr std::string_view BLACK_BG        = "\x1B[40m";
    static constexpr std::string_view BLACK_BOLD      = "\x1B[1m\x1B[30m";

    static constexpr std::string_view RED             = "\x1B[31m";
    static constexpr std::string_view RED_BG          = "\x1B[41m";
    static constexpr std::string_view RED_BOLD        = "\x1B[1m\x1B[31m";

    static constexpr std::string_view GREEN           = "\x1B[32m";
    static constexpr std::string_view BLUE_BG         = "\x1B[44m";
    static constexpr std::string_view BLUE_BOLD       = "\x1B[1m\x1B[32m";

    static constexpr std::string_view YELLOW          = "\x1B[33m";
    static constexpr std::string_view GREEN_BG        = "\x1B[42m";
    static constexpr std::string_view GREEN_BOLD      = "\x1B[1m\x1B[34m";

    static constexpr std::string_view BLUE            = "\x1B[34m";
    static constexpr std::string_view YELLOW_BG       = "\x1B[43m";
    static constexpr std::string_view YELLOW_BOLD     = "\x1B[1m\x1B[35m";

    static constexpr std::string_view MAGENTA         = "\x1B[35m";
    static constexpr std::string_view MAGENTA_BG      = "\x1B[45m";
    static constexpr std::string_view MAGENTA_BOLD    = "\x1B[1m\x1B[33m";

    static constexpr std::string_view CYAN            = "\x1B[36m";
    static constexpr std::string_view CYAN_BG         = "\x1B[46m";
    static constexpr std::string_view CYAN_BOLD       = "\x1B[1m\x1B[36m";

    static constexpr std::string_view WHITE           = "\x1B[37m";
    static constexpr std::string_view WHITE_BG        = "\x1B[47m";
    static constexpr std::string_view WHITE_BOLD      = "\x1B[1m\x1B[37m";
    //
    //
    //      Bright colors.
    static constexpr std::string_view BLACK_BRIGHT    = "\x1B[90m";
    static constexpr std::string_view BLACK_BB        = "\x1B[1m\x1B[90m";

    static constexpr std::string_view RED_BRIGHT      = "\x1B[91m";
    static constexpr std::string_view RED_BB          = "\x1B[1m\x1B[91m";

    static constexpr std::string_view GREEN_BRIGHT    = "\x1B[92m";
    static constexpr std::string_view GREEN_BB        = "\x1B[1m\x1B[92m";

    static constexpr std::string_view YELLOW_BRIGHT   = "\x1B[93m";
    static constexpr std::string_view YELLOW_BB       = "\x1B[1m\x1B[93m";

    static constexpr std::string_view BLUE_BRIGHT     = "\x1B[94m";
    static constexpr std::string_view BLUE_BB         = "\x1B[1m\x1B[94m";

    static constexpr std::string_view MAGENTA_BRIGHT  = "\x1B[95m";
    static constexpr std::string_view MAGENTA_BB      = "\x1B[1m\x1B[95m";

    static constexpr std::string_view CYAN_BRIGHT     = "\x1B[96m";
    static constexpr std::string_view CYAN_BB         = "\x1B[1m\x1B[96m";

    static constexpr std::string_view WHITE_BRIGHT    = "\x1B[97m";
    static constexpr std::string_view WHITE_BB        = "\x1B[1m\x1B[97m";
    //
    //
    //      Text styles.
    static constexpr std::string_view BOLD            = "\x1B[1m";
    static constexpr std::string_view RESET_BOLD      = "\x1B[22m";

    static constexpr std::string_view DIM             = "\x1B[2m";
    static constexpr std::string_view RESET_DIM       = "\x1B[22m";

    static constexpr std::string_view UNDERLINE       = "\x1B[4m";
    static constexpr std::string_view RESET_UNDERLINE = "\x1B[24m";

    static constexpr std::string_view BLINK           = "\x1B[5m";
    static constexpr std::string_view RESET_BLINK     = "\x1B[25m";

    static constexpr std::string_view INVERSE         = "\x1B[7m";
    static constexpr std::string_view RESET_INVERSE   = "\x1B[27m";
    //
    //
    //      Reset defaults.
    static constexpr std::string_view RESET_BG        = "\x1B[49";
    static constexpr std::string_view RESET_FG        = "\x1B[39";
    static constexpr std::string_view RESET           = "\x1B[0m";
    //
    //
    //      Convenience messages.
    static constexpr std::string_view PASS            = "\x1B[1m\x1B[92mPASSED.\x1B[0m\n";
    static constexpr std::string_view FAIL            = "\x1B[1m\x1B[91mFAILED.\x1B[0m\n";
};

*/

// *************************************************************************** //
//
//
//
// *************************************************************************** //
// *************************************************************************** //
}//   END OF "info" NAMESPACE.






// *************************************************************************** //
//
//
//
// *************************************************************************** //
// *************************************************************************** //
}//   END OF "cb" NAMESPACE.




























#endif      //  _CBAPP_APP_INIT_H  //
// *************************************************************************** //
// *************************************************************************** //
//
//  END.

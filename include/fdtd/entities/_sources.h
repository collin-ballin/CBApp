/***********************************************************************************
*
*       ********************************************************************
*       ****             _ S O U R C E S . H  ____  F I L E             ****
*       ********************************************************************
*
*              AUTHOR:      Collin A. Bond.
*               DATED:      August 31, 2025.
*
*       ********************************************************************
*                FILE:      [include/fdtd.h]
*
*
*
**************************************************************************************
**************************************************************************************/
#ifndef _CB_FDTD_ENTITIES_SOURCES_H
#define _CB_FDTD_ENTITIES_SOURCES_H  1


//  0.1.        ** MY **  HEADERS...
#include CBAPP_USER_CONFIG
#include "cblib.h"


//  0.2     STANDARD LIBRARY HEADERS...
#include <iostream>
#include <filesystem>
#include <stdexcept>

#include <cmath>
#include <complex>
#include <cstdint>

#include <vector>
#include <array>
#include <initializer_list>

#include <utility>
#include <cstring>

#include <typeinfo>






namespace cb { namespace fdtd {//     BEGINNING NAMESPACE "cb" :: "fdtd"...
// *************************************************************************** //
// *************************************************************************** //



//      NOTES...
// *************************************************************************** //
// *************************************************************************** //
//
//  CORE TYPES:
//      SourceType                  : SoftE, HardE, SoftB, HardB.
//      SourceRole                  : Field Source  vs.  TF/SF Directional Source,
//      FieldComponent              : What COMPONENT(S) of the field are generated.
//
//      WaveformType                : Gaussian Pulse  vs.  Ricker Wavelet  vs.  Time-Harmonic.
//
//
//  AUXILIARY TYPES:
//
//
//
//
//
//
// *************************************************************************** //










// *************************************************************************** //
//
//
//
//      0.      ENUMS AND AUXILIARY TYPES...
// *************************************************************************** //
// *************************************************************************** //

//  "SourceType"
enum class SourceType : uint8_t {
    HardE, SoftE, HardB, SoftB,
//
    COUNT
};
//
//  "DEF_SOURCE_TYPE_NAMES"
//      COMPILE-TIME ARRAY CONTAINING THE NAME OF ALL FDTD SOURCE TYPES.
inline static const std::array<const char *, static_cast<size_t>(SourceType::COUNT)>
DEF_SOURCE_TYPE_NAMES        = {{
    "Hard-E",       "Soft-E",        "Hard-B",          "Soft-B"
}};




//  "SourceRole"
enum class SourceRole : uint8_t {
    Field,      Directional,
//
    COUNT
};
//
//  "DEF_SOURCE_ROLE_NAMES"
inline static const std::array<const char *, static_cast<size_t>(SourceRole::COUNT)>
DEF_SOURCE_ROLE_NAMES        = {{
    "Field Source",       "Directional Source"
}};



//
//
// *************************************************************************** //
// *************************************************************************** //   END "AUXILIARY" Types.






// *************************************************************************** //
//
//
//
//      1.      MAIN PAYLOAD TYPE...
// *************************************************************************** //
// *************************************************************************** //



// *************************************************************************** //
// *************************************************************************** //
//                PRIMARY CLASS INTERFACE:
// 		Class-Interface for the "MyClass" Abstraction.
// *************************************************************************** //
// *************************************************************************** //

class MyClass
{
//      0.          CONSTANTS AND ALIASES...
// *************************************************************************** //
// *************************************************************************** //
public:

    // *************************************************************************** //
    //      NESTED TYPENAME ALIASES.
    // *************************************************************************** //
    //  CBAPP_APPSTATE_ALIAS_API
    //  friend class                        App;
    //
    //  using                               MyAlias                         = MyTypename_t;
    
    // *************************************************************************** //
    //
    //
    // *************************************************************************** //
    //      STATIC CONSTEXPR CONSTANTS.
    // *************************************************************************** //
    //  static constexpr float              ms_MY_CONSTEXPR_VALUE           = 240.0f;
    
    // *************************************************************************** //
    //
    //
    // *************************************************************************** //
    //      REFERENCES TO GLOBAL ARRAYS.
    // *************************************************************************** //
    //  static constexpr auto &             ms_STATE_NAMES                  = DEF_MYCLASS_STATE_NAMES;
    
//
//
// *************************************************************************** //
// *************************************************************************** //   END "CONSTANTS AND ALIASES".



// *************************************************************************** //
//
//
//      1.          CLASS DATA-MEMBERS...
// *************************************************************************** //
// *************************************************************************** //
protected:
    
    // *************************************************************************** //
    //      STATE VARIABLES.
    // *************************************************************************** //
    //  AppState &                          CBAPP_STATE_NAME;
    //  State                               m_state                         { State::None };

    // *************************************************************************** //
    //
    //
    // *************************************************************************** //
    //      IMPORTANT DATA-MEMBERS.
    // *************************************************************************** //
    //  std::vector<ObjectType>             m_data                          {  };
    
    // *************************************************************************** //
    //
    //
    // *************************************************************************** //
    //      GENERIC DATA.
    // *************************************************************************** //
    //  bool                                m_initialized                   = false;
    //  bool                                m_first_frame                   = false;
    
//
//
//
// *************************************************************************** //
// *************************************************************************** //   END "CLASS DATA-MEMBERS".



// *************************************************************************** //
//
//
//      2.A.        PUBLIC MEMBER FUNCTIONS...
// *************************************************************************** //
// *************************************************************************** //
public:
    
    // *************************************************************************** //
    //      INITIALIZATION METHODS.         |   "init.cpp" ...
    // *************************************************************************** //
    //  explicit                        MyClass                 (app::AppState & );             //  Def. Constructor.
                                        MyClass                 (void) noexcept                 = default;
                                        ~MyClass                (void)                          = default;
    //
    void                                initialize              (void);
    
    // *************************************************************************** //
    //      DELETED FUNCTIONS.              |   ...
    // *************************************************************************** //
                                        MyClass                 (const MyClass &    src)        = delete;   //  Copy. Constructor.
                                        MyClass                 (MyClass &&         src)        = delete;   //  Move Constructor.
    MyClass &                           operator =              (const MyClass &    src)        = delete;   //  Assgn. Operator.
    MyClass &                           operator =              (MyClass &&         src)        = delete;   //  Move-Assgn. Operator.
    
    // *************************************************************************** //
    //
    //
    // *************************************************************************** //
    //      MAIN API.                       |   "interface.cpp" ...
    // *************************************************************************** //
    //  void                                Begin                               ([[maybe_unused]] const char *,     [[maybe_unused]] bool *,    [[maybe_unused]] ImGuiWindowFlags);
    //  void                                Begin                               (const char * id = "##MaidID");
    
//
//
//
// *************************************************************************** //
// *************************************************************************** //   END "PUBLIC MEMBER FUNCS".


    
// *************************************************************************** //
//
//
//      2.B.        PROTECTED MEMBER FUNCTIONS...
// *************************************************************************** //
// *************************************************************************** //
protected:

    // *************************************************************************** //
    //      "RULE-OF ..." FUNCTIONS.        |   "init.cpp" ...
    // *************************************************************************** //
    //  inline void                         init                                (void);
    //  void                                load                                (void);
    //  void                                destroy                             (void);
    
    // *************************************************************************** //
    //
    //
    //
    // *************************************************************************** //
    //      MAIN UI FUNCTIONS.              |   "interface.cpp" ...
    // *************************************************************************** //
    //                              MAIN GUI FUNCTIONS:
    //  void                                handle_ui                           (void);
    
    // *************************************************************************** //
    //
    //
    //
    // *************************************************************************** //
    //      OPERATION FUNCTIONS.            |   "tools.cpp" ...
    // *************************************************************************** //
    //  void                                handle_ui                           (void);
    
//
//
//
// *************************************************************************** //
// *************************************************************************** //   END "PROTECTED" FUNCTIONS.

    
   
// *************************************************************************** //
//
//
//      2.C.        INLINE FUNCTIONS...
// *************************************************************************** //
// *************************************************************************** //
protected:

    // *************************************************************************** //
    //      CENTRALIZED STATE MANAGEMENT FUNCTIONS.
    // *************************************************************************** //
    
    //  "_no_op"
    //  inline void                         _no_op                              (void)      { return; };
    
    
    
    // *************************************************************************** //
    //
    //
    //
    // *************************************************************************** //
    //      MISC. UTILITY FUNCTIONS.
    // *************************************************************************** //
    
    
    
    // *************************************************************************** //
    
//
//
//
// *************************************************************************** //
// *************************************************************************** //   END "INLINE" FUNCTIONS.






// *************************************************************************** //
// *************************************************************************** //
};//	END "MyClass" INLINE CLASS DEFINITION.













//
//
// *************************************************************************** //
// *************************************************************************** //   END "PAYLOAD" Type.
















// *************************************************************************** //
//
//
//
// *************************************************************************** //
// *************************************************************************** //
} }//   END OF "cb" :: "fdtd" NAMESPACE.













#endif      //  _CB_FDTD_ENTITIES_SOURCES_H  //
// *************************************************************************** //
// *************************************************************************** //
//
//  END.
